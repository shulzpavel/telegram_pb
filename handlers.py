from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from config import ADMINS, ALLOWED_CHAT_ID , ALLOWED_TOPIC_ID
import state
from datetime import datetime
import copy

router = Router()
fibonacci_values = ['1', '2', '3', '5', '8', '13']

def is_admin(user):
    return user.username and ('@' + user.username) in ADMINS

def get_main_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu:new_task"),
            types.InlineKeyboardButton(text="üìã –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="menu:summary")
        ],
        [
            types.InlineKeyboardButton(text="‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å –≥–æ–ª–æ—Å–∞", callback_data="menu:revote"),
            types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="menu:reveal")
        ],
        [
            types.InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="menu:participants"),
            types.InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="menu:leave")
        ]
    ])

@router.message(Command("join"))
async def join(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or msg.message_thread_id != ALLOWED_TOPIC_ID:
        return

    args = msg.text.split()
    if len(args) != 2 or args[1] != state.current_token:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return

    state.participants[msg.from_user.id] = msg.from_user.full_name
    await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏.")
    if is_admin(msg.from_user):
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu(callback: CallbackQuery, **kwargs):
    fsm: FSMContext = kwargs["state"]
    await callback.answer()

    if callback.message.chat.id != ALLOWED_CHAT_ID or callback.message.message_thread_id != ALLOWED_TOPIC_ID:
        return

    action = callback.data.split(":")[1]
    if callback.message.chat.id != ALLOWED_CHAT_ID or not is_admin(callback.from_user):
        return

    if action == "new_task":
        await callback.message.answer(
            "‚úèÔ∏è –ö–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ https://—Å—Å—ã–ª–∫–∞",
            parse_mode=None
        )
        await fsm.set_state(state.PokerStates.waiting_for_task_text)

    elif action == "summary":
        await show_summary(callback.message)

    elif action == "revote":
        state.votes.clear()
        await callback.message.answer("üîÑ –ì–æ–ª–æ—Å–∞ –æ–±–Ω—É–ª–µ–Ω—ã.")

    elif action == "reveal":
        await reveal_votes(callback)

    elif action == "participants":
        if not state.participants:
            await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(f"- {v}" for v in state.participants.values())
            await callback.message.answer(text)

    elif action == "leave":
        user_id = callback.from_user.id
        if user_id in state.participants:
            del state.participants[user_id]
            state.votes.pop(user_id, None)
            await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")

@router.message(state.PokerStates.waiting_for_task_text)
async def receive_task_list(msg: types.Message, **kwargs):
    fsm: FSMContext = kwargs["state"]
    raw_lines = msg.text.strip().splitlines()
    state.tasks_queue = [line.strip() for line in raw_lines if line.strip()]
    state.current_task_index = 0
    state.votes.clear()
    state.last_batch.clear()  # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–Ω—á
    await fsm.clear()
    await start_next_task(msg)

async def start_next_task(msg: types.Message):
    if state.current_task_index >= len(state.tasks_queue):
        await show_summary(msg)
        return

    state.current_task = state.tasks_queue[state.current_task_index]
    state.votes.clear()

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i+3]]
        for i in range(0, len(fibonacci_values), 3)
    ])
    await msg.answer(
        f"üìù –û—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á–∏:\n\n{state.current_task}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("vote:"))
async def vote_handler(callback: types.CallbackQuery):
    await callback.answer()
    if callback.message.chat.id != ALLOWED_CHAT_ID:
        return

    value = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if user_id not in state.participants:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ /join.")
        return

    already_voted = user_id in state.votes
    state.votes[user_id] = value
    await callback.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!" if not already_voted else "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ")

    if len(state.votes) == len(state.participants):
        await reveal_votes(callback)

async def reveal_votes(callback: types.CallbackQuery):
    msg = callback.message
    if not state.votes:
        await msg.answer("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤.")
        return

    result = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
    total = 0
    count = 0
    for uid, value in state.votes.items():
        name = state.participants.get(uid, f"ID {uid}")
        result += f"- {name}: {value}\n"
        try:
            total += int(value)
            count += 1
        except ValueError:
            continue
    if count > 0:
        avg = round(total / count, 1)
        result += f"\nüìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg}"
    else:
        result += "\nüìà –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É"

    await msg.answer(result)

    state.history.append({
        'task': state.current_task,
        'votes': copy.deepcopy(state.votes),
        'timestamp': datetime.now()
    })
    state.last_batch.append({
    'task': state.current_task,
    'votes': copy.deepcopy(state.votes),
    'timestamp': datetime.now()
})
    state.current_task_index += 1
    await start_next_task(msg)

async def show_summary(msg: types.Message):
    if not state.last_batch:
        await msg.answer("üì≠ –°–µ—Å—Å–∏—è –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å.")
        return

    text = "üì¶ –ò—Ç–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–¥–∞—á:\n"
    total_all = 0
    count_all = 0

    for i, h in enumerate(state.last_batch, 1):
        text += f"\nüîπ <b>{i}. {h['task']}</b>\n"
        total = 0
        count = 0
        for uid, v in h['votes'].items():
            name = state.participants.get(uid, f"ID {uid}")
            text += f"‚Äî {name}: {v}\n"
            try:
                total += int(v)
                count += 1
                total_all += int(v)
                count_all += 1
            except ValueError:
                continue
        if count > 0:
            avg = round(total / count, 1)
            text += f"üìà –°—Ä–µ–¥–Ω–µ–µ: {avg}\n"
        else:
            text += "üìà –°—Ä–µ–¥–Ω–µ–µ: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å\n"

    if count_all > 0:
        overall = round(total_all, 1)
        text += f"\nüì¶ –°—É–º–º–∞ SP –∑–∞ –±–∞–Ω—á: {overall}"
    await msg.answer(text)

@router.message(Command("start", "help"))
async def help_command(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID:
        return
    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n"
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á Planning Poker.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏):\n"
        "`/join magic_token`\n\n"
        "‚Äî üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚Äî üìã –ò—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω—á–∞\n"
        "‚Äî ‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å –≥–æ–ª–æ—Å–∞\n"
        "‚Äî üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
    )
    await msg.answer(text, parse_mode="Markdown")

@router.message()
async def unknown_input(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID:
        return
    if msg.from_user.id not in state.participants:
        await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ `/join` –∏ –≤–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")