from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from config import ADMINS, ALLOWED_CHAT_ID, ALLOWED_TOPIC_ID
import state
from datetime import datetime, timedelta
import copy
import asyncio
import os

router = Router()
fibonacci_values = ['1', '2', '3', '5', '8', '13']
vote_timeout_seconds = 90
active_vote_message_id = None
active_vote_task = None

HARD_ADMINS = {'@shults_shults_shults', '@naumov_egor'}

def is_admin(user):
    return user.username and ('@' + user.username) in HARD_ADMINS

def get_main_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu:new_task"),
            types.InlineKeyboardButton(text="üìã –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="menu:summary")
        ],
        [
            types.InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="menu:show_participants"),
            types.InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="menu:leave"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="menu:kick_participant")
        ]
    ])

@router.message(Command("join"))
async def join(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or msg.message_thread_id != ALLOWED_TOPIC_ID:
        return

    args = msg.text.split()
    if len(args) != 2 or args[1] != state.current_token:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return

    state.participants[msg.from_user.id] = msg.from_user.full_name
    await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏.")
    if is_admin(msg.from_user):
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu(callback: CallbackQuery, fsm_state: FSMContext):

    await callback.answer()

    if callback.message.chat.id != ALLOWED_CHAT_ID or callback.message.message_thread_id != ALLOWED_TOPIC_ID:
        return
    if not is_admin(callback.from_user):
        return

    action = callback.data.split(":")[1]

    if action == "new_task":
        await callback.message.answer("‚úèÔ∏è –ö–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ https://—Å—Å—ã–ª–∫–∞")
        await state_context.set_state(state.PokerStates.waiting_for_task_text)

    elif action == "summary":
        await show_full_day_summary(callback.message)

    elif action == "show_participants":
        if not state.participants:
            await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(f"- {v}" for v in state.participants.values())
            await callback.message.answer(text)

    elif action == "leave":
        user_id = callback.from_user.id
        if user_id in state.participants:
            del state.participants[user_id]
            state.votes.pop(user_id, None)
            await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")

    elif action == "kick_participant":
        if not state.participants:
            await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        buttons = [
            [types.InlineKeyboardButton(text=name, callback_data=f"kick_user:{uid}")]
            for uid, name in state.participants.items()
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("kick_user:"))
async def kick_user(callback: CallbackQuery):
    if callback.message.chat.id != ALLOWED_CHAT_ID or callback.message.message_thread_id != ALLOWED_TOPIC_ID:
        return
    if not is_admin(callback.from_user):
        return

    uid = int(callback.data.split(":")[1])
    name = state.participants.pop(uid, None)
    state.votes.pop(uid, None)

    if name:
        await callback.message.answer(f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{name}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.", parse_mode="HTML")
    else:
        await callback.message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

@router.message(state.PokerStates.waiting_for_task_text)
async def receive_task_list(msg: types.Message, state_context: FSMContext):
    if msg.chat.id != ALLOWED_CHAT_ID or msg.message_thread_id != ALLOWED_TOPIC_ID:
        return

    raw_lines = msg.text.strip().splitlines()
    state.tasks_queue = [line.strip() for line in raw_lines if line.strip()]
    state.current_task_index = 0
    state.votes.clear()
    state.last_batch.clear()
    state.batch_completed = False

    await state_context.clear()
    await start_next_task(msg)

async def vote_timeout(msg: types.Message):
    await asyncio.sleep(vote_timeout_seconds)

    if state.current_task_index >= len(state.tasks_queue):
        return

    await msg.answer("‚è∞ –í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—ã—à–ª–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    await reveal_votes(msg)

async def start_next_task(msg: types.Message):
    global active_vote_message_id, active_vote_task

    if getattr(state, "batch_completed", False):
        return

    if state.current_task_index >= len(state.tasks_queue):
        state.batch_completed = True
        await show_summary(msg)
        return

    state.current_task = state.tasks_queue[state.current_task_index]
    state.votes.clear()

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i + 3]]
        for i in range(0, len(fibonacci_values), 3)
    ])

    sent_msg = await msg.answer(
        f"üìù –û—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á–∏:\n\n{state.current_task}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É:",
        reply_markup=keyboard
    )

    active_vote_message_id = sent_msg.message_id
    if active_vote_task and not active_vote_task.done():
        active_vote_task.cancel()
    active_vote_task = asyncio.create_task(vote_timeout(msg))

@router.callback_query(F.data.startswith("vote:"))
async def vote_handler(callback: CallbackQuery):
    global active_vote_message_id, active_vote_task

    if callback.message.message_id != active_vote_message_id:
        await callback.answer("‚ùå –≠—Ç–æ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", show_alert=True)
        return

    if callback.message.chat.id != ALLOWED_CHAT_ID or callback.message.message_thread_id != ALLOWED_TOPIC_ID:
        return

    value = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if user_id not in state.participants:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ /join.")
        return

    already_voted = user_id in state.votes
    state.votes[user_id] = value
    await callback.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!" if not already_voted else "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ")

    if len(state.votes) == len(state.participants):
        if active_vote_task and not active_vote_task.done():
            active_vote_task.cancel()
        await reveal_votes(callback.message)

async def reveal_votes(msg: types.Message):
    global active_vote_message_id, active_vote_task

    if not state.votes:
        await msg.answer("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤.")
        return

    await msg.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ü–µ–Ω–µ–Ω–∞.")
    active_vote_message_id = None
    if active_vote_task and not active_vote_task.done():
        active_vote_task.cancel()

    state.history.append({
        'task': state.current_task,
        'votes': copy.deepcopy(state.votes),
        'timestamp': datetime.now()
    })
    state.last_batch.append({
        'task': state.current_task,
        'votes': copy.deepcopy(state.votes),
        'timestamp': datetime.now()
    })
    state.current_task_index += 1
    await start_next_task(msg)

async def show_summary(msg: types.Message):
    if not state.last_batch:
        await msg.answer("üì≠ –°–µ—Å—Å–∏—è –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å.")
        return

    output_path = "summary_report.txt"
    with open(output_path, "w") as f:
        for i, h in enumerate(state.last_batch, 1):
            f.write(f"{i}. {h['task']}\n")
            sorted_votes = sorted(h['votes'].items(), key=lambda x: state.participants.get(x[0], ""))
            for uid, v in sorted_votes:
                name = state.participants.get(uid, f"ID {uid}")
                f.write(f"  - {name}: {v}\n")
            f.write("\n")

    file = FSInputFile(output_path)
    await msg.answer_document(file, caption="üìÑ –û—Ç—á–µ—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–∞–Ω—á—É")
    os.remove(output_path)
    await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

async def show_full_day_summary(msg: types.Message):
    if not state.history:
        await msg.answer("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        return

    output_path = "day_summary.txt"
    total = 0
    with open(output_path, "w") as f:
        for i, h in enumerate(state.history, 1):
            f.write(f"{i}. {h['task']}\n")
            max_vote = 0
            sorted_votes = sorted(h['votes'].items(), key=lambda x: state.participants.get(x[0], ""))
            for uid, v in sorted_votes:
                name = state.participants.get(uid, f"ID {uid}")
                f.write(f"  - {name}: {v}\n")
                try:
                    max_vote = max(max_vote, int(v))
                except:
                    pass
            total += max_vote
            f.write("\n")
        f.write(f"–í—Å–µ–≥–æ SP –∑–∞ –¥–µ–Ω—å: {total}\n")

    file = FSInputFile(output_path)
    await msg.answer_document(file, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
    os.remove(output_path)

@router.message(Command("start", "help"))
async def help_command(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID:
        return
    text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á Planning Poker.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n"
        "`/join your_token_here`\n\n"
        "‚Äî üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚Äî üìã –ò—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω—á–∞\n"
        "‚Äî üìä –ò—Ç–æ–≥–∏ –≤—Å–µ–≥–æ –¥–Ω—è\n"
        "‚Äî ‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å –≥–æ–ª–æ—Å–∞\n"
        "‚Äî üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
    )
    await msg.answer(text, parse_mode="Markdown")

@router.message()
async def unknown_input(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or msg.message_thread_id != ALLOWED_TOPIC_ID:
        return
    if msg.from_user.id not in state.participants:
        await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ `/join <—Ç–æ–∫–µ–Ω>` –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
