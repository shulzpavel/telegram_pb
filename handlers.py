"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram Poker Bot
"""
import asyncio
import logging
from typing import Optional
from datetime import datetime, timedelta
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

from models import PokerStates
# from services import SessionService, TimerService, GroupConfigService  # Using bootstrap now
# from storage import storage  # Removed - using new architecture
from core.bootstrap import bootstrap
from domain.enums import SessionStatus
from utils import (
    get_main_menu, get_settings_menu, get_scale_menu, get_timeout_menu,
    get_stats_menu, get_help_menu, safe_send_message, safe_answer_callback, 
    format_participants_list, generate_summary_report, build_vote_keyboard, 
    build_admin_keyboard, format_task_with_progress, format_voting_status,
    format_participant_stats, format_average_estimates
)
from config import GROUPS_CONFIG, DEFAULT_SCALE, DEFAULT_TIMEOUT

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ bootstrap
session_service = bootstrap.get_session_service()
group_config_service = bootstrap.get_group_config_service()
timer_service = bootstrap.get_timer_service()


def is_allowed_chat(chat_id: int, topic_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç"""
    logger.info(f"IS_ALLOWED_CHAT: Checking chat_id={chat_id}, topic_id={topic_id}")
    logger.info(f"IS_ALLOWED_CHAT: GROUPS_CONFIG has {len(GROUPS_CONFIG)} groups")
    
    for group_config in GROUPS_CONFIG:
        logger.info(f"IS_ALLOWED_CHAT: Checking group {group_config.get('chat_id')}_{group_config.get('topic_id')}")
        if (group_config['chat_id'] == chat_id and 
            group_config['topic_id'] == topic_id and 
            group_config.get('is_active', True)):
            logger.info(f"IS_ALLOWED_CHAT: ‚úÖ Chat {chat_id}_{topic_id} is allowed")
            return True
    
    logger.info(f"IS_ALLOWED_CHAT: ‚ùå Chat {chat_id}_{topic_id} is NOT allowed")
    return False


def is_admin(user: types.User, chat_id: int, topic_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return group_config_service.is_admin(chat_id, topic_id, user)


@router.message(Command("start", "help"))
async def help_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    if not is_allowed_chat(msg.chat.id, msg.message_thread_id or 0):
        return
    
    text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á Planning Poker.\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/join + —Ç–æ–∫–µ–Ω` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏\n"
        "‚Ä¢ `/menu` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        "üéØ –§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n"
        "‚Ä¢ üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–∞–º\n"
        "‚Ä¢ üìà –ü–æ–¥—Å—á–µ—Ç Story Points\n"
        "‚Ä¢ üìã –û—Ç—á–µ—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º\n"
        "‚Ä¢ üìä –ò—Ç–æ–≥–∏ –¥–Ω—è\n\n"
    )
    
    await safe_send_message(msg.answer, text, parse_mode="Markdown")


@router.message(Command("menu"))
async def menu_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        if not is_allowed_chat(msg.chat.id, msg.message_thread_id or 0):
            await safe_send_message(
                msg.answer,
                "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
            )
            return
        
        if not msg.from_user:
            await safe_send_message(
                msg.answer,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö
        await safe_send_message(
            msg.answer,
            "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu(is_admin=is_admin(msg.from_user, msg.chat.id, msg.message_thread_id or 0))
        )
    except Exception as e:
        logger.error(f"Error in menu command: {e}")
        await safe_send_message(
            msg.answer,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(Command("join"))
async def join_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏"""
    logger.info(f"JOIN command from user {msg.from_user.id if msg.from_user else 'None'} in chat {msg.chat.id}")
    
    if not msg.from_user or not msg.text:
        logger.warning("JOIN: Missing user or text")
        return
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    logger.info(f"JOIN: chat_id={chat_id}, topic_id={topic_id}")
    
    if not is_allowed_chat(chat_id, topic_id):
        logger.warning(f"JOIN: Chat not allowed - {chat_id}_{topic_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    args = msg.text.split()
    logger.info(f"JOIN: Command args: {args}")
    
    if len(args) != 2:
        logger.warning(f"JOIN: Invalid command format for user {msg.from_user.id}: {msg.text}")
        await safe_send_message(
            msg.answer,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/join <—Ç–æ–∫–µ–Ω>`",
            parse_mode="Markdown"
        )
        return
    
    provided_token = args[1]
    expected_token = group_config_service.get_token(chat_id, topic_id)
    
    logger.info(f"JOIN: Token check - provided: '{provided_token}', expected: '{expected_token}'")
    
    if provided_token != expected_token:
        logger.warning(f"JOIN: Token mismatch for user {msg.from_user.id} - provided: '{provided_token}', expected: '{expected_token}'")
        await safe_send_message(msg.answer, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    logger.info(f"JOIN: Token validation passed for user {msg.from_user.id}")

    # –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if is_admin(msg.from_user, chat_id, topic_id):
        logger.info(f"JOIN: User {msg.from_user.id} is admin, showing admin menu")
        session = session_service.get_session(chat_id, topic_id)
        # –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        from domain.value_objects import UserId
        session.remove_participant(UserId(msg.from_user.id))
        session_service.save_session(session)
        
        logger.info(f"JOIN: Sending admin menu to user {msg.from_user.id}")
        await safe_send_message(
            msg.answer,
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!",
            reply_markup=get_main_menu(is_admin=True)
        )
        logger.info(f"JOIN: Admin menu sent successfully")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    logger.info(f"JOIN: Adding participant {msg.from_user.id} to session {chat_id}_{topic_id}")
    success = session_service.add_participant(chat_id, topic_id, msg.from_user)
    if success:
        logger.info(f"JOIN: Successfully added participant {msg.from_user.id}")
        await safe_send_message(
            msg.answer,
            f"‚úÖ {msg.from_user.full_name or f'User {msg.from_user.id}'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏."
        )
    else:
        logger.error(f"JOIN: Failed to add participant {msg.from_user.id}")


@router.callback_query(F.data.startswith("menu:"))
async def handle_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    logger.info(f"MENU callback from user {callback.from_user.id if callback.from_user else 'None'}: {callback.data}")
    
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        logger.warning("MENU: Missing message or user")
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        logger.warning(f"MENU: Chat not allowed - {chat_id}_{topic_id}")
        return
    
    session = session_service.get_session(chat_id, topic_id)

    action = callback.data.split(":")[1] if callback.data else ""
    logger.info(f"MENU: Action = {action}")

    if action == "new_task":
        await safe_send_message(
            callback.message.answer,
            "üìù **–ü—Ä–∏—Å—ã–ª–∞–π –∑–∞–ø—Ä–æ—Å, –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∑—Ä–æ—Å–ª—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!**\n\n"
            "‚Ä¢ **JQL –∑–∞–ø—Ä–æ—Å** (–Ω–∞–ø—Ä–∏–º–µ—Ä: project = FLEX AND status = 'To Do')\n"
            "‚Ä¢ **–¢–µ–∫—Å—Ç–æ–º** (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n\n"
            "üí° **–ü—Ä–∏–º–µ—Ä—ã JQL –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ project = FLEX AND type = Bug\n"
            "‚Ä¢ assignee = currentUser() AND status = 'To Do'\n"
            "‚Ä¢ priority = High ORDER BY created DESC\n\n"
            "ü§∑‚Äç‚ôÇÔ∏è **–ï—Å–ª–∏ –Ω–µ —É–º–µ–µ—à—å JQL** - –ø—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∏–π:\n"
            "FLEX-123 - –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "FLEX-456 - –ï—â–µ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞"
        )
        await state.set_state(PokerStates.waiting_for_task_text)

    elif action == "summary":
        await show_full_day_summary(callback.message)

    elif action == "show_participants":
        participants = list(session.participants.values())
        text = format_participants_list(participants)
        from utils import get_participants_menu
        try:
            await callback.message.edit_text(text, reply_markup=get_participants_menu())
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, text, reply_markup=get_participants_menu())

    elif action == "leave":
        user_id = callback.from_user.id
        # Use service to ensure proper persistence and typing
        participant = session_service.remove_participant(chat_id, topic_id, user_id)
        if participant:
            await safe_send_message(
                callback.message.answer,
                "üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é."
            )

    elif action == "kick_participant":
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_send_message(
                callback.message.answer,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            )
            return
        await show_kick_participant_menu(callback.message)

    elif action == "settings":
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_send_message(
                callback.message.answer,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return
        await safe_send_message(
            callback.message.answer,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
            reply_markup=get_settings_menu()
        )

    elif action == "new_token":
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_send_message(
                callback.message.answer,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã."
            )
            return
        await generate_new_token(callback.message)

    elif action == "stats":
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_send_message(
                callback.message.answer,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            )
            return
        await safe_send_message(
            callback.message.answer,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:",
            reply_markup=get_stats_menu()
        )

    elif action == "help":
        await safe_send_message(
            callback.message.answer,
            "‚ùì –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å:",
            reply_markup=get_help_menu()
        )

    elif action == "next_batch":
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_send_message(
                callback.message.answer,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –±–∞–Ω—á–∏."
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞–Ω—á
        await timer_service._start_next_task(chat_id, topic_id, callback.message)

    elif action == "back":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            await callback.message.edit_text(
                "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(is_admin=is_admin(callback.from_user, callback.message.chat.id, callback.message.message_thread_id or 0))
            )
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_send_message(
                callback.message.answer,
                "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(is_admin=is_admin(callback.from_user, callback.message.chat.id, callback.message.message_thread_id or 0))
            )


async def show_kick_participant_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    logger.info(f"KICK_PARTICIPANT_MENU: chat_id={message.chat.id}, topic_id={message.message_thread_id or 0}")
    
    chat_id = message.chat.id
    topic_id = message.message_thread_id or 0
    session = session_service.get_session(chat_id, topic_id)
    
    logger.info(f"KICK_PARTICIPANT_MENU: Found {len(session.participants)} participants")
    
    if not session.participants:
        logger.info("KICK_PARTICIPANT_MENU: No participants found")
        await safe_send_message(message.answer, "‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    buttons = []
    for participant in session.participants.values():
        buttons.append([types.InlineKeyboardButton(
            text=f"üë§ {participant.full_name.value}",
            callback_data=f"kick_user:{participant.user_id.value}"
        )])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await safe_send_message(
        message.answer,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


async def generate_new_token(message: types.Message):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω"""
    import secrets
    import string
    
    chat_id = message.chat.id
    topic_id = message.message_thread_id or 0
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω
    alphabet = string.ascii_letters + string.digits
    new_token = ''.join(secrets.choice(alphabet) for _ in range(12))
    
    group_config_service.set_token(chat_id, topic_id, new_token)
    
    await safe_send_message(
        message.answer,
        f"üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:\n`{new_token}`\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        f"`/join {new_token}`\n\n"
        f"üí° –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ. "
        f"–•–∞—Ä–¥–∫–æ–¥ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º.",
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("kick_user:"))
async def kick_user(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        return

    user_id = int(callback.data.split(":")[1]) if callback.data else 0
    participant = session_service.remove_participant(chat_id, topic_id, user_id)

    if participant:
        await safe_send_message(
            callback.message.answer,
            f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{participant.full_name.value}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.",
            parse_mode="HTML"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        session = session_service.get_session(chat_id, topic_id)
        if (session.is_voting_active and 
            session.is_all_voted()):
            await timer_service.finish_voting(chat_id, topic_id, callback.message)
    else:
        await safe_send_message(
            callback.message.answer,
            "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω."
        )


@router.message(PokerStates.waiting_for_task_text)
async def receive_task_list(msg: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return

    # –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if msg.from_user:
        session = session_service.get_session(chat_id, topic_id)
        from domain.value_objects import UserId
        session.remove_participant(UserId(msg.from_user.id))
        session_service.save_session(session)

    tasks = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    if msg.document:
        await safe_send_message(
            msg.answer,
            "‚ùå –§–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è! –ü—Ä–∏—Å—ã–ª–∞–π JQL –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!"
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.text:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ JQL –∑–∞–ø—Ä–æ—Å
        from utils import parse_jira_jql
        tasks = parse_jira_jql(msg.text.strip())
        
        if not tasks:
            # –ï—Å–ª–∏ JQL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            from utils import parse_task_list
            tasks = parse_task_list(msg.text)
            
            if not tasks:
                await safe_send_message(
                    msg.answer,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏!\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π:**\n"
                    "‚Ä¢ JQL –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: project = FLEX AND status = 'To Do')\n"
                    "‚Ä¢ –¢–µ–∫—Å—Ç —Å –∑–∞–¥–∞—á–∞–º–∏ (FLEX-123 - –û–ø–∏—Å–∞–Ω–∏–µ)\n\n"
                    "üîß **–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA_EMAIL –∏ JIRA_TOKEN**"
                )
                return
    else:
        await safe_send_message(
            msg.answer,
            "‚ùå –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Ç–µ–∫—Å—Ç–æ–º!"
        )
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    logger.info(f"RECEIVE_TASK_LIST: Starting voting session with {len(tasks)} tasks")
    success = session_service.start_voting_session(chat_id, topic_id, tasks)
    
    if success:
        logger.info(f"RECEIVE_TASK_LIST: Session started successfully")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω—á–∞—Ö
        current_batch, total_batches = session_service.get_current_batch_info(chat_id, topic_id)
        total_tasks = session_service.get_total_all_tasks_count(chat_id, topic_id)
        
        logger.info(f"RECEIVE_TASK_LIST: Batch info - current: {current_batch}, total: {total_batches}, tasks: {total_tasks}")
        
        await safe_send_message(
            msg.answer,
            f"‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ {total_tasks} –∑–∞–¥–∞—á–∞–º!\n"
            f"üìä –ó–∞–¥–∞—á–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {total_batches} –±–∞–Ω—á–µ–π –ø–æ 10 —à—Ç—É–∫\n"
            f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–Ω—á–∞ 1/{total_batches}"
        )
        await state.clear()
        
        logger.info(f"RECEIVE_TASK_LIST: About to start first task")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        await timer_service._start_next_task(chat_id, topic_id, msg)
        logger.info(f"RECEIVE_TASK_LIST: First task start completed")
    else:
        logger.error(f"RECEIVE_TASK_LIST: Failed to start voting session")
        await safe_send_message(
            msg.answer,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
        )




@router.callback_query(F.data.startswith("vote:"))
async def vote_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    logger.info(f"VOTE callback from user {callback.from_user.id if callback.from_user else 'None'}: {callback.data}")
    
    if not callback.message or not callback.from_user:
        logger.warning("VOTE: Missing message or user")
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        logger.warning(f"VOTE: Chat not allowed - {chat_id}_{topic_id}")
        return

    session = session_service.get_session(chat_id, topic_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not session.current_task:
        await safe_answer_callback(callback, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    if callback.message.message_id != session.active_vote_message_id:
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if session.active_vote_message_id is None:
            await safe_answer_callback(callback, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        else:
            await safe_answer_callback(callback, "‚ùå –≠—Ç–æ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        return

    value = callback.data.split(":")[1] if callback.data else ""
    user_id = callback.from_user.id

    logger.info(f"VOTE_HANDLER: Processing vote from user {user_id} with value '{value}'")
    logger.info(f"VOTE_HANDLER: Session participants: {list(session.participants.keys())}")
    logger.info(f"VOTE_HANDLER: Current task votes: {list(session.current_task.votes.keys()) if session.current_task else 'No current task'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
    from domain.value_objects import UserId
    user_id_obj = UserId(user_id)
    is_participant = user_id_obj in session.participants
    is_user_admin = is_admin(callback.from_user, chat_id, topic_id)
    
    logger.info(f"VOTE_HANDLER: User {user_id} - is_participant: {is_participant}, is_admin: {is_user_admin}")
    logger.info(f"VOTE_HANDLER: user_id_obj: {user_id_obj}")
    logger.info(f"VOTE_HANDLER: session.participants keys: {list(session.participants.keys())}")
    
    if not is_participant and not is_user_admin:
        logger.warning(f"VOTE_HANDLER: User {user_id} is not registered")
        await safe_answer_callback(callback, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ /join.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ
    already_voted = user_id_obj in (session.current_task.votes if session.current_task else {})
    logger.info(f"VOTE_HANDLER: User {user_id} already_voted: {already_voted}")
    
    # Check if we're in revoting mode
    session = session_service.get_session(chat_id, topic_id)
    if session.revoting_status.value == "in_progress":
        # Handle revoting
        from core.bootstrap import bootstrap
        session_control_service = bootstrap.get_session_control_service()
        success = session_control_service.add_revoting_vote(chat_id, topic_id, user_id, value)
        logger.info(f"REVOTING_VOTE: Vote added successfully: {success}")
        
        if success:
            await safe_answer_callback(
                callback,
                "‚úÖ –ì–æ–ª–æ—Å –≤ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —É—á—Ç—ë–Ω!" if not already_voted else "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
            )
            
            # Check if all voted in revoting
            if session_control_service.is_revoting_all_voted(chat_id, topic_id):
                logger.info("REVOTING: All voted, completing revoting task")
                # Show completion button or auto-complete
                from utils import create_revoting_task_keyboard
                await callback.message.edit_reply_markup(
                    reply_markup=create_revoting_task_keyboard()
                )
        else:
            await safe_answer_callback(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞ –≤ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏", show_alert=True)
            return
    else:
        # Handle normal voting
        logger.info(f"VOTE_HANDLER: Calling session_service.add_vote for user {user_id} with value '{value}'")
        success = session_service.add_vote(chat_id, topic_id, user_id, value)
        logger.info(f"VOTE_HANDLER: add_vote result: {success}")
        logger.info(f"VOTE_HANDLER: Vote added successfully: {success}")
        
        if success:
            await safe_answer_callback(
                callback,
                "‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!" if not already_voted else "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        all_voted = session_service.is_all_voted(chat_id, topic_id)
        logger.info(f"VOTE_HANDLER: All voted: {all_voted}")
        
        if all_voted:
            logger.info("VOTE_HANDLER: All voted, revealing votes")
            await timer_service.finish_voting(chat_id, topic_id, callback.message)


@router.callback_query(F.data.startswith("timer:"))
async def timer_control(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        await safe_answer_callback(callback, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", show_alert=True)
        return

    session = session_service.get_session(chat_id, topic_id)
    
    if callback.message.message_id != session.active_vote_message_id:
        await safe_answer_callback(callback, "–≠—Ç–æ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
        return

    action = callback.data.split(":")[1] if callback.data else ""
    
    if action == "+30":
        timer_service.extend_timer(chat_id, topic_id, 30)
        await safe_answer_callback(callback, "‚è± +30 —Å–µ–∫")
    elif action == "-30":
        timer_service.extend_timer(chat_id, topic_id, -30)
        await safe_answer_callback(callback, "‚è± ‚àí30 —Å–µ–∫")


@router.callback_query(F.data == "finish_voting")
async def handle_finish_voting(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    await safe_answer_callback(callback, "‚úÖ")
    
    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    # Check if user is admin
    if not is_admin(callback.from_user, chat_id, topic_id):
        await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", show_alert=True)
        return
    
    # Check if session is already in voting state to prevent double-finish
    session_service = bootstrap.get_session_service()
    session = session_service.get_session(chat_id, topic_id)
    if session and session.status != SessionStatus.VOTING:
        logger.warning(f"FINISH_VOTING: Session {chat_id}_{topic_id} is not in VOTING state, current: {session.status}")
        await safe_answer_callback(callback, "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", show_alert=True)
        return
    
    # Finish voting
    await timer_service.finish_voting(chat_id, topic_id, callback.message)
    logger.info(f"FINISH_VOTING: Admin {callback.from_user.id} finished voting in {chat_id}_{topic_id}")


@router.callback_query(F.data.startswith("settings:"))
async def handle_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        return

    action = callback.data.split(":")[1] if callback.data else ""

    if action == "timeout":
        await safe_send_message(
            callback.message.answer,
            "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_timeout_menu()
        )
    elif action == "scale":
        await safe_send_message(
            callback.message.answer,
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —à–∫–∞–ª—É –æ—Ü–µ–Ω–æ–∫:",
            reply_markup=get_scale_menu()
        )
    elif action == "admins":
        await show_admins_management(callback.message)
    elif action == "back":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            await callback.message.edit_text(
                "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(is_admin=is_admin(callback.from_user, callback.message.chat.id, callback.message.message_thread_id or 0))
            )
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_send_message(
                callback.message.answer,
                "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(is_admin=is_admin(callback.from_user, callback.message.chat.id, callback.message.message_thread_id or 0))
            )


@router.callback_query(F.data.startswith("timeout:"))
async def set_timeout(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        return

    timeout = int(callback.data.split(":")[1]) if callback.data else 90
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    group_config = group_config_service.get_group_config(chat_id, topic_id)
    if group_config:
        group_config.timeout = timeout
        group_config_service.update_group_config(group_config)
        logger.info(f"TIMEOUT_SETTING: Updated timeout to {timeout} for {chat_id}_{topic_id}")
    
    # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    session = session_service.get_session(chat_id, topic_id)
    from domain.value_objects import TimeoutSeconds
    session.default_timeout = TimeoutSeconds(timeout)
    session_service.save_session(session)
    
    await safe_answer_callback(callback, f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeout}—Å")


@router.callback_query(F.data.startswith("scale:"))
async def set_scale(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∫–∞–ª—É –æ—Ü–µ–Ω–æ–∫"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        return

    scale_index = int(callback.data.split(":")[1]) if callback.data else 0
    scales = [
        ['1', '2', '3', '5', '8', '13'],
        ['1', '2', '3', '5', '8', '13', '21'],
        ['0.5', '1', '2', '3', '5', '8', '13'],
        ['1', '2', '4', '8', '16', '32']
    ]
    
    if 0 <= scale_index < len(scales):
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        group_config = group_config_service.get_group_config(chat_id, topic_id)
        if group_config:
            group_config.scale = scales[scale_index]
            group_config_service.update_group_config(group_config)
            logger.info(f"SCALE_SETTING: Updated scale to {scales[scale_index]} for {chat_id}_{topic_id}")
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        session = session_service.get_session(chat_id, topic_id)
        session.scale = scales[scale_index]
        session_service.save_session(session)
        
        scale_text = ', '.join(scales[scale_index])
        await safe_answer_callback(callback, f"üìä –®–∫–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {scale_text}")


async def show_admins_management(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    chat_id = message.chat.id
    topic_id = message.message_thread_id or 0
    
    config = group_config_service.get_group_config(chat_id, topic_id)
    if not config:
        await safe_send_message(
            message.answer,
            "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return
    
    admins_text = "üëë –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:\n" + "\n".join(f"‚Ä¢ {admin}" for admin in config.admins)
    await safe_send_message(message.answer, admins_text)


async def show_full_day_summary(msg: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è"""
    logger.info(f"SHOW_FULL_DAY_SUMMARY: chat_id={msg.chat.id}, topic_id={msg.message_thread_id or 0}")
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    today_history = group_config_service.get_today_history(chat_id, topic_id)
    logger.info(f"SHOW_FULL_DAY_SUMMARY: Found {len(today_history) if today_history else 0} tasks for today")
    
    if not today_history:
        logger.info("SHOW_FULL_DAY_SUMMARY: No tasks for today")
        await safe_send_message(msg.answer, "üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    session = session_service.get_session(chat_id, topic_id)
    temp_session = session
    temp_session.history = today_history
    
    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    from utils import generate_voting_results_file
    import tempfile
    import os
    
    results_text = generate_voting_results_file(temp_session)
    if results_text:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', suffix='.txt', delete=False) as f:
            f.write(results_text)
            temp_file_path = f.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file_input = FSInputFile(temp_file_path, filename=f"daily_summary_{datetime.now().strftime('%Y%m%d_%H%M')}.txt")
            await msg.answer_document(file_input, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)


@router.callback_query(F.data.startswith("stats:"))
async def handle_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    if not is_admin(callback.from_user, chat_id, topic_id):
        return

    action = callback.data.split(":")[1] if callback.data else ""
    session = session_service.get_session(chat_id, topic_id)

    if action == "today":
        today_history = group_config_service.get_today_history(chat_id, topic_id)
        if today_history:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            temp_session = session
            temp_session.history = today_history
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            from utils import generate_voting_results_file
            import tempfile
            import os
            
            results_text = generate_voting_results_file(temp_session)
            if results_text:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', suffix='.txt', delete=False) as f:
                    f.write(results_text)
                    temp_file_path = f.name
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    file_input = FSInputFile(temp_file_path, filename=f"daily_summary_{datetime.now().strftime('%Y%m%d_%H%M')}.txt")
                    await callback.message.answer_document(file_input, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_file_path)
        else:
            try:
                await callback.message.edit_text("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
            except Exception as e:
                logger.warning(f"Failed to edit message: {e}")
                await safe_send_message(callback.message.answer, "üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")

    elif action == "last_session":
        if session.last_batch:
            lines = ["üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ï–ï –ì–û–õ–û–°–û–í–ê–ù–ò–ï", "=" * 35]
            total_sp = 0
            for h in session.last_batch:
                max_vote = 0
                for vote_value in h['votes'].values():
                    try:
                        max_vote = max(max_vote, int(vote_value))
                    except ValueError:
                        pass
                total_sp += max_vote
            lines.append(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(session.last_batch)}")
            lines.append(f"üìà –í—Å–µ–≥–æ SP: {total_sp}")
            lines.append(f"üìâ –°—Ä–µ–¥–Ω–µ–µ SP –Ω–∞ –∑–∞–¥–∞—á—É: {total_sp/len(session.last_batch):.1f}")
            try:
                await callback.message.edit_text("\n".join(lines))
            except Exception as e:
                logger.warning(f"Failed to edit message: {e}")
                await safe_send_message(callback.message.answer, "\n".join(lines))
        else:
            try:
                await callback.message.edit_text("üì≠ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å.")
            except Exception as e:
                logger.warning(f"Failed to edit message: {e}")
                await safe_send_message(callback.message.answer, "üì≠ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å.")

    elif action == "participants":
        participants = list(session.participants.values())
        stats = format_participant_stats(participants, session.history)
        try:
            await callback.message.edit_text(stats)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, stats)

    elif action == "averages":
        stats = format_average_estimates(session.history)
        try:
            await callback.message.edit_text(stats)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, stats)


@router.callback_query(F.data.startswith("help:"))
async def handle_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏"""
    await safe_answer_callback(callback, "‚úÖ")

    if not callback.message or not callback.from_user:
        return
    
    chat_id = callback.message.chat.id
    topic_id = callback.message.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return

    action = callback.data.split(":")[1] if callback.data else ""

    if action == "commands":
        text = (
            "üìñ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´\n\n"
            "‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ `/menu` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/join magic_token` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏\n"
            "‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üéØ –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
            "üëë –î–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ —à–∫–∞–ª\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã"
        )
        try:
            await callback.message.edit_text(text)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, text)

    elif action == "howto":
        text = (
            "üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨ –í PLANNING POKER\n\n"
            "1Ô∏è‚É£ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ `/join magic_token`\n"
            "3Ô∏è‚É£ –ì–æ–ª–æ—Å—É–µ–º –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ\n"
            "4Ô∏è‚É£ –û–±—Å—É–∂–¥–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –æ—Ü–µ–Ω–∫–∞—Ö\n"
            "5Ô∏è‚É£ –ü—Ä–∏—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É\n"
            "6Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ\n\n"
            "üí° –°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ù–µ –æ–±—Å—É–∂–¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∫–∞–ª—É –§–∏–±–æ–Ω–∞—á—á–∏ (1,2,3,5,8,13...)\n"
            "‚Ä¢ –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è - –æ–±—Å—É–¥–∏—Ç–µ –∑–∞–¥–∞—á—É\n"
            "‚Ä¢ –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã"
        )
        try:
            await callback.message.edit_text(text)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, text)

    elif action == "settings":
        text = (
            "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò\n\n"
            "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã:\n"
            "‚Ä¢ 30 —Å–µ–∫ - –±—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ 90 —Å–µ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ 180 —Å–µ–∫ - —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n"
            "üìä –®–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫:\n"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è: 1,2,3,5,8,13\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è: 1,2,3,5,8,13,21\n"
            "‚Ä¢ –° –¥—Ä–æ–±–Ω—ã–º–∏: 0.5,1,2,3,5,8,13\n"
            "‚Ä¢ –°—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏: 1,2,4,8,16,32"
        )
        try:
            await callback.message.edit_text(text)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, text)

    elif action == "admin":
        if not is_admin(callback.from_user, chat_id, topic_id):
            try:
                await callback.message.edit_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            except Exception as e:
                logger.warning(f"Failed to edit message: {e}")
                await safe_send_message(callback.message.answer, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        
        text = (
            "üîß –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò\n\n"
            "üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É\n\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã\n\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤\n"
            "‚Ä¢ –í—ã–±–æ—Ä —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ –≥—Ä—É–ø–ø—ã\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏\n\n"
            "üîê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞:\n"
            "‚Ä¢ –•–∞—Ä–¥–∫–æ–¥ –∞–¥–º–∏–Ω: –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∞–¥–º–∏–Ω—ã: —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω—ã: —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ"
        )
        try:
            await callback.message.edit_text(text)
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
            await safe_send_message(callback.message.answer, text)


@router.message()
async def unknown_input(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not msg.from_user:
        return
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_admin(msg.from_user, chat_id, topic_id):
        return
    
    session = session_service.get_session(chat_id, topic_id)
    from domain.value_objects import UserId
    if UserId(msg.from_user.id) not in session.participants:
        await safe_send_message(
            msg.answer,
            "‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ `/join magic_token` –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
            parse_mode="Markdown"
        )


# =============================================================================
# ADMIN HANDLERS - Story Points Update
# =============================================================================

@router.callback_query(F.data == "admin:update_story_points")
async def handle_update_story_points(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points –≤ Jira"""
    try:
        if not callback.message:
            await safe_answer_callback(
                callback,
                "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                show_alert=True
            )
            return
            
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not is_admin(callback.from_user, chat_id, topic_id or 0):
            await safe_answer_callback(
                callback,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id or 0)
        if not session:
            await safe_answer_callback(
                callback,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö –±–∞–Ω—á–µ–π
        completed_tasks = []
        from utils import JiraLinkGenerator
        
        jira_generator = JiraLinkGenerator()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)
        for task_result in session.history:
            task_text = task_result.get('task', '')
            votes = task_result.get('votes', {})
            
            if task_text and votes:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º Jira key –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
                task_keys = jira_generator.extract_task_keys(task_text)
                if task_keys:
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤
                    numeric_votes = []
                    for vote_value in votes.values():
                        try:
                            numeric_votes.append(int(vote_value))
                        except (ValueError, TypeError):
                            continue
                    
                    if numeric_votes:
                        max_vote = max(numeric_votes)
                        completed_tasks.append((task_keys[0], max_vote))
                        logger.info(f"Found completed task: {task_keys[0]} with max vote: {max_vote}")
        
        logger.info(f"Total completed tasks found: {len(completed_tasks)}")
        
        if not completed_tasks:
            await safe_answer_callback(
                callback,
                "‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points",
                show_alert=True
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if callback.message:
            await callback.message.edit_text(
            f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Story Points...**\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ {len(completed_tasks)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
            f"‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira...",
            parse_mode="Markdown"
        )
        
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Jira —Å–µ—Ä–≤–∏—Å
            from services.jira_update_service import JiraUpdateService
            from config import JIRA_BASE_URL, JIRA_EMAIL, JIRA_TOKEN, JIRA_STORY_POINTS_FIELD_ID, JIRA_PROJECT_KEYS, JIRA_PROJECT_FIELD_MAPPING
            import json
            
            # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            allowed_projects = [p.strip().upper() for p in JIRA_PROJECT_KEYS.split(',') if p.strip()]
            
            # –ü–∞—Ä—Å–∏–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
            try:
                project_field_mapping = json.loads(JIRA_PROJECT_FIELD_MAPPING) if JIRA_PROJECT_FIELD_MAPPING else {}
            except json.JSONDecodeError:
                logger.warning(f"Invalid JIRA_PROJECT_FIELD_MAPPING JSON: {JIRA_PROJECT_FIELD_MAPPING}")
                project_field_mapping = {}
            
            jira_service = JiraUpdateService(
                jira_base_url=JIRA_BASE_URL,
                jira_email=JIRA_EMAIL,
                jira_token=JIRA_TOKEN,
                story_points_field_id=JIRA_STORY_POINTS_FIELD_ID,
                allowed_projects=allowed_projects,
                project_field_mapping=project_field_mapping
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Jira
        if not await jira_service.is_jira_available():
            if callback.message:
                await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points**\n\n"
                "üî¥ Jira –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode="Markdown"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Story Points
        results = await jira_service.update_multiple_story_points(completed_tasks)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = jira_service.generate_update_report(results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        if callback.message:
            await callback.message.edit_text(
            report,
            parse_mode="Markdown"
        )
        
        logger.info(f"Story Points update completed for session {chat_id}_{topic_id}: {len(results)} tasks processed")
        
    except Exception as e:
        logger.error(f"Error updating Story Points: {e}")
        if callback.message:
            await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points**\n\n"
            f"üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="Markdown"
        )
