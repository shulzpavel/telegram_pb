#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import unittest
from unittest.mock import Mock, patch
from collections import Counter
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from jira_service import JiraService

class TestArchitectureFixes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def test_jira_service_204_response(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 204 –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Jira API"""
        service = JiraService()
        
        # –ú–æ–∫–∞–µ–º 204 –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–ª–∞
        with patch('requests.put') as mock_put:
            mock_response = Mock()
            mock_response.raise_for_status.return_value = None
            mock_response.status_code = 204
            mock_response.content = b''
            mock_put.return_value = mock_response
            
            result = service.update_story_points("TEST-123", 5)
            self.assertTrue(result)
    
    def test_jira_service_json_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        service = JiraService()
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
        with patch('requests.put') as mock_put:
            mock_response = Mock()
            mock_response.raise_for_status.return_value = None
            mock_response.status_code = 200
            mock_response.content = b'invalid json'
            mock_response.json.side_effect = ValueError("Invalid JSON")
            mock_put.return_value = mock_response
            
            result = service.update_story_points("TEST-123", 5)
            self.assertFalse(result)
    
    def test_task_data_structure(self):
        """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è Jira –∑–∞–¥–∞—á–∏
        jira_task = {
            'text': 'Test task summary https://domain.com/browse/TEST-123',
            'jira_key': 'TEST-123',
            'summary': 'Test task summary',
            'url': 'https://domain.com/browse/TEST-123',
            'votes': {123: '5', 456: '8'},
            'story_points': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.assertIn('jira_key', jira_task)
        self.assertIn('votes', jira_task)
        self.assertIn('story_points', jira_task)
        self.assertEqual(jira_task['jira_key'], 'TEST-123')
        self.assertEqual(len(jira_task['votes']), 2)
    
    def test_task_data_structure_regular(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
        regular_task = {
            'text': 'Regular task without Jira',
            'jira_key': None,
            'summary': 'Regular task without Jira',
            'url': None,
            'votes': {123: '3', 456: '5'},
            'story_points': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.assertIsNone(regular_task['jira_key'])
        self.assertIsNone(regular_task['url'])
        self.assertIn('votes', regular_task)
        self.assertEqual(len(regular_task['votes']), 2)
    
    def test_vote_calculation_per_task(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω–æ"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
        task1_votes = {123: '5', 456: '5', 789: '8'}
        task2_votes = {123: '3', 456: '3', 789: '5'}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        task1_counter = Counter(task1_votes.values())
        task1_most_common = task1_counter.most_common(1)[0][0]
        
        task2_counter = Counter(task2_votes.values())
        task2_most_common = task2_counter.most_common(1)[0][0]
        
        self.assertEqual(task1_most_common, '5')
        self.assertEqual(task2_most_common, '3')
    
    def test_batch_with_mixed_tasks(self):
        """–¢–µ—Å—Ç –±–∞–Ω—á–∞ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (Jira + –æ–±—ã—á–Ω—ã–µ)"""
        batch_tasks = [
            {
                'text': 'Jira task summary https://domain.com/browse/TEST-123',
                'jira_key': 'TEST-123',
                'summary': 'Jira task summary',
                'url': 'https://domain.com/browse/TEST-123',
                'votes': {123: '5', 456: '5'},
                'story_points': None
            },
            {
                'text': 'Regular task without Jira',
                'jira_key': None,
                'summary': 'Regular task without Jira',
                'url': None,
                'votes': {123: '3', 456: '3'},
                'story_points': None
            },
            {
                'text': 'Another Jira task https://domain.com/browse/TEST-456',
                'jira_key': 'TEST-456',
                'summary': 'Another Jira task',
                'url': 'https://domain.com/browse/TEST-456',
                'votes': {123: '8', 456: '8'},
                'story_points': None
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Jira –∑–∞–¥–∞—á–∏
        jira_tasks = [task for task in batch_tasks if task.get('jira_key')]
        
        self.assertEqual(len(jira_tasks), 2)
        self.assertEqual(jira_tasks[0]['jira_key'], 'TEST-123')
        self.assertEqual(jira_tasks[1]['jira_key'], 'TEST-456')
    
    def test_environment_variables_fallback(self):
        """–¢–µ—Å—Ç fallback –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ config.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å fallback –∑–Ω–∞—á–µ–Ω–∏—è
        self.assertIsNotNone(config.BOT_TOKEN)
        self.assertIsNotNone(config.JIRA_URL)
        self.assertIsNotNone(config.JIRA_USERNAME)
        self.assertIsNotNone(config.JIRA_API_TOKEN)

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    try:
        unittest.main(verbosity=2)
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        sys.exit(1)
