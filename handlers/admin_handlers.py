"""
Admin handlers
"""
import logging
from aiogram import types, Router, F
from aiogram.types import CallbackQuery

from core.bootstrap import bootstrap
from .base_handlers import is_allowed_chat, is_admin
from utils import safe_send_message, safe_answer_callback

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
session_service = bootstrap.get_session_service()
group_config_service = bootstrap.get_group_config_service()


@router.callback_query(F.data == "admin:update_story_points")
async def handle_update_story_points(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points"""
    try:
        logger.info(f"ADMIN_UPDATE_SP: User {callback.from_user.id if callback.from_user else 'unknown'} clicked update SP")
        
        if not callback.from_user or not callback.message:
            logger.error("ADMIN_UPDATE_SP: Missing callback data")
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å Story Points", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã
        group_config = group_config_service.get_group_config(chat_id, topic_id or 0)
        if not group_config:
            await safe_answer_callback(callback, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Jira —Ç–æ–∫–µ–Ω–∞
        if not group_config.jira_token or not group_config.jira_email:
            await safe_answer_callback(
                callback, 
                "‚ùå Jira –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.", 
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        session = session_service.get_session(chat_id, topic_id)
        if not session:
            await safe_answer_callback(callback, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        results = session.get_voting_results()
        logger.info(f"ADMIN_UPDATE_SP: Voting results: {results}")
        if not results:
            logger.warning("ADMIN_UPDATE_SP: No voting results found")
            await safe_answer_callback(callback, "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Story Points –≤ Jira
        from services.jira_update_service import JiraUpdateService
        from config import JIRA_BASE_URL, JIRA_STORY_POINTS_FIELD_ID
        
        jira_service = JiraUpdateService(
            jira_base_url=JIRA_BASE_URL,
            jira_email=group_config.jira_email,
            jira_token=group_config.jira_token,
            story_points_field_id=JIRA_STORY_POINTS_FIELD_ID
        )
        
        updated_tasks = []
        failed_tasks = []
        
        for task_key, story_points in results.items():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º story_points –≤ int
                story_points_int = int(story_points)
                
                # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                result = await jira_service.update_story_points(
                    issue_key=task_key,
                    story_points=story_points_int
                )
                
                if result.success:
                    updated_tasks.append(f"‚úÖ {task_key}: {story_points} SP")
                    logger.info(f"Updated SP for {task_key}: {story_points}")
                else:
                    failed_tasks.append(f"‚ùå {task_key}: {result.error}")
                    logger.error(f"Failed to update SP for {task_key}: {result.error}")
            except Exception as e:
                failed_tasks.append(f"‚ùå {task_key}: {str(e)}")
                logger.error(f"Error updating SP for {task_key}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_lines = ["üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Story Points**\n"]
        
        if updated_tasks:
            report_lines.append("‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:**")
            report_lines.extend(updated_tasks)
            report_lines.append("")
        
        if failed_tasks:
            report_lines.append("‚ùå **–û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**")
            report_lines.extend(failed_tasks)
            report_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tasks = len(results)
        success_count = len(updated_tasks)
        failed_count = len(failed_tasks)
        
        report_lines.append(f"üìä **–ò—Ç–æ–≥–æ:** {success_count}/{total_tasks} –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        if failed_count > 0:
            report_lines.append(f"‚ö†Ô∏è {failed_count} –∑–∞–¥–∞—á –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å")
        
        report_text = "\n".join(report_lines)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from utils import get_main_menu
        
        await safe_send_message(
            callback.message.edit_text,
            report_text,
            reply_markup=get_main_menu(is_admin=True),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in update story points handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Story Points", show_alert=True)


@router.callback_query(F.data.startswith("menu:kick_participant"))
async def handle_kick_participant(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        session = session_service.get_session(chat_id, topic_id)
        participants = list(session.participants.values())
        
        if not participants:
            await safe_answer_callback(callback, "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = []
        
        for participant in participants:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {participant.full_name.value}",
                    callback_data=f"kick:{participant.user_id.value}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
        ])
        
        await safe_send_message(
            callback.message.edit_text,
            "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in kick participant handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("kick:"))
async def handle_confirm_kick(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(callback.data.split(":", 1)[1])
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = session_service.remove_participant(chat_id, topic_id, user_id)
        
        if participant:
            await safe_answer_callback(callback, f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {participant.full_name.value} —É–¥–∞–ª–µ–Ω")
        else:
            await safe_answer_callback(callback, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in confirm kick handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True)
