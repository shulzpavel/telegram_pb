"""
Role management handlers
"""
import logging
from aiogram import types, Router
from aiogram.filters import Command

from core.bootstrap import bootstrap
from .base_handlers import is_allowed_chat, is_admin
from utils import safe_send_message

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
role_service = bootstrap.get_role_service()


@router.message(Command("set_role"))
async def set_role_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not msg.from_user:
        return
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–æ–ª–∏
    if not is_admin(msg.from_user, chat_id, topic_id):
        await safe_send_message(
            msg.answer,
            "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–æ–ª–∏."
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /set_role @username lead
    if not msg.text:
        await safe_send_message(
            msg.answer,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    args = msg.text.split()
    if len(args) != 3:
        await safe_send_message(
            msg.answer,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_role @username role`\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: participant, lead, admin, super_admin",
            parse_mode="Markdown"
        )
        return
    
    username = args[1].lstrip('@')
    role_name = args[2].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    from domain.enums import ParticipantRole
    try:
        role = ParticipantRole(role_name)
    except ValueError:
        await safe_send_message(
            msg.answer,
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å '{role_name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: participant, lead, admin, super_admin"
        )
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await safe_send_message(
        msg.answer,
        f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è @{username}.\n"
        f"‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."
    )


@router.message(Command("my_role"))
async def my_role_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏"""
    if not msg.from_user:
        return
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    if not is_allowed_chat(chat_id, topic_id):
        return
    
    user_role = role_service.get_user_role(msg.from_user)
    can_vote = role_service.can_vote(msg.from_user)
    can_manage = role_service.can_manage_session(msg.from_user)
    
    role_description = {
        'participant': 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫ - –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å',
        'lead': 'üëë –õ–∏–¥ - –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π',
        'admin': '‚öôÔ∏è –ê–¥–º–∏–Ω - –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π, –Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç',
        'super_admin': 'üîß –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω - –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞'
    }
    
    await safe_send_message(
        msg.answer,
        f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {role_description.get(user_role.value, user_role.value)}\n\n"
        f"üó≥Ô∏è **–ú–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:** {'‚úÖ –î–∞' if can_vote else '‚ùå –ù–µ—Ç'}\n"
        f"‚öôÔ∏è **–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å:** {'‚úÖ –î–∞' if can_manage else '‚ùå –ù–µ—Ç'}"
    )
