"""
Role management handlers
"""
import logging
from aiogram import types, Router
from aiogram.filters import Command

from core.bootstrap import bootstrap
from .base_handlers import is_allowed_chat
from utils import safe_send_message

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
role_service = bootstrap.get_role_service()
logger.info("ROLE_HANDLERS: Role service initialized successfully")
logger.info("ROLE_HANDLERS: Router created and ready")


@router.message(Command("join"))
async def join_command(msg: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º —Ä–æ–ª–∏"""
    logger.info("ROLE_HANDLERS: JOIN command handler triggered!")
    logger.info(f"JOIN: Received command from user {msg.from_user.id if msg.from_user else 'None'}")
    logger.info(f"JOIN: Message text: {msg.text}")
    logger.info(f"JOIN: Chat ID: {msg.chat.id}, Topic ID: {msg.message_thread_id or 0}")
    
    if not msg.from_user:
        logger.info("JOIN: No user, returning")
        return
    
    chat_id = msg.chat.id
    topic_id = msg.message_thread_id or 0
    
    logger.info(f"JOIN: Chat ID: {chat_id}, Topic ID: {topic_id}")
    
    if not is_allowed_chat(chat_id, topic_id):
        logger.info("JOIN: Chat not allowed, returning")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /join token
    if not msg.text:
        await safe_send_message(
            msg.answer,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/join token`",
            parse_mode="Markdown"
        )
        return
    
    text_parts = msg.text.split()
    if len(text_parts) < 2:
        await safe_send_message(
            msg.answer,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/join token`\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n"
            "‚Ä¢ `user_token` - —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
            "‚Ä¢ `lead_token` - —Ä–æ–ª—å –ª–∏–¥–∞\n"
            "‚Ä¢ `admin_token` - —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞",
            parse_mode="Markdown"
        )
        return
    
    token = text_parts[1]
    username = msg.from_user.username or str(msg.from_user.id)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
        from domain.enums import ParticipantRole
        
        role = None
        if token == "user_token":
            role = ParticipantRole.PARTICIPANT
        elif token == "lead_token":
            role = ParticipantRole.LEAD
        elif token == "admin_token":
            role = ParticipantRole.ADMIN
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
            await safe_send_message(
                msg.answer,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n"
                "‚Ä¢ `user_token` - —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                "‚Ä¢ `lead_token` - —Ä–æ–ª—å –ª–∏–¥–∞\n"
                "‚Ä¢ `admin_token` - —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞",
                parse_mode="Markdown"
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        success = role_service.set_user_role_by_username(chat_id, topic_id, username, role)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
            session_service = bootstrap.get_session_service()
            try:
                session_service.add_participant(chat_id, topic_id, msg.from_user)
                logger.info(f"Added participant {msg.from_user.id} to session {chat_id}_{topic_id}")
            except Exception as e:
                logger.error(f"Error adding participant to session: {e}")
            
            role_emoji = {
                ParticipantRole.PARTICIPANT: "üë§",
                ParticipantRole.LEAD: "üëë", 
                ParticipantRole.ADMIN: "‚ö°"
            }.get(role, "‚ùì")
            
            await safe_send_message(
                msg.answer,
                f"{role_emoji} –†–æ–ª—å **{role.value}** —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n"
                f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                parse_mode="Markdown"
            )
        else:
            await safe_send_message(
                msg.answer,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å",
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"Error setting role: {e}")
        await safe_send_message(
            msg.answer,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏",
            parse_mode="Markdown"
        )