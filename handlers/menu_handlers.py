"""
Menu handlers
"""
import logging
from aiogram import types, Router, F
from aiogram.types import CallbackQuery

from core.bootstrap import bootstrap
from .base_handlers import is_allowed_chat, is_admin
from utils import (
    safe_send_message, safe_answer_callback, get_main_menu, get_settings_menu,
    get_scale_menu, get_timeout_menu, get_stats_menu, get_help_menu,
    format_participants_list, format_participants_list_with_roles, generate_summary_report, get_batch_summary_menu
)

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
session_service = bootstrap.get_session_service()
group_config_service = bootstrap.get_group_config_service()


@router.callback_query(F.data == "menu:back")
async def handle_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_is_admin = is_admin(callback.from_user, chat_id, topic_id)
        keyboard = get_main_menu(is_admin=user_is_admin)
        
        await safe_send_message(
            callback.message.edit_text,
            "üéØ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in back handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "menu:new_task")
async def handle_new_task(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Jira
        group_config = group_config_service.get_group_config(chat_id, topic_id)
        if not group_config or not group_config.jira_email or not group_config.jira_token:
            await safe_answer_callback(
                callback, 
                "‚ùå Jira –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", 
                show_alert=True
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            "üîç **–í–≤–µ–¥–∏—Ç–µ JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Jira**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JQL –∑–∞–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `project = \"PROJECT\" AND status = \"To Do\"`\n"
            "‚Ä¢ `assignee = currentUser() AND status != Done`\n"
            "‚Ä¢ `fixVersion = \"Sprint 1\"`",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in new task handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


@router.callback_query(F.data == "task_source:manual")
async def handle_manual_tasks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á –≤—Ä—É—á–Ω—É—é"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            "üìù **–í–≤–æ–¥ –∑–∞–¥–∞—á –≤—Ä—É—á–Ω—É—é**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in manual tasks handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "task_source:jira")
async def handle_jira_tasks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Jira"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Jira
        group_config = group_config_service.get_group_config(chat_id, topic_id)
        if not group_config or not group_config.jira_email or not group_config.jira_token:
            await safe_answer_callback(
                callback, 
                "‚ùå Jira –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", 
                show_alert=True
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            "üîó **–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Jira**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `project = \"PROJECT\" AND status = \"To Do\"`\n"
            "‚Ä¢ `assignee = currentUser() AND status != Done`\n"
            "‚Ä¢ `fixVersion = \"Sprint 1\"`",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in Jira tasks handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "task_source:excel")
async def handle_excel_tasks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            "üìä **–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx) —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ –¢—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in Excel tasks handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "menu:summary")
async def handle_summary(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id)
        
        if not session:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ]
            
            await safe_send_message(
                callback.message.edit_text,
                "‚ùå **–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="Markdown"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        try:
            report = generate_summary_report(session, is_daily=True)
        except Exception as e:
            logger.error(f"Error generating summary report: {e}")
            report = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            f"üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è**\n\n{report}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in summary handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "menu:show_participants")
async def handle_show_participants(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id)
        
        if not session:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ]
            
            await safe_send_message(
                callback.message.edit_text,
                "‚ùå **–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
        participants_list = list(session.participants.values())
        participants_text = format_participants_list_with_roles(participants_list, chat_id, topic_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await safe_send_message(
            callback.message.edit_text,
            f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–∏**\n\n{participants_text}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in show participants handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)


@router.callback_query(F.data == "menu:leave")
async def handle_leave(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = session_service.remove_participant(chat_id, topic_id, callback.from_user.id)
        
        if participant:
            await safe_answer_callback(callback, f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é, {participant.full_name.value}!")
        else:
            await safe_answer_callback(callback, "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Å—Å–∏–∏", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in leave handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–µ—Å—Å–∏–∏", show_alert=True)


@router.message(lambda message: not message.text.startswith('/'))
async def handle_jql_query(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ JQL –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not message.from_user or not message.text:
            return
        
        chat_id = message.chat.id
        topic_id = message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(message.from_user, chat_id, topic_id):
            return
        
        jql_query = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ JQL –∑–∞–ø—Ä–æ—Å
        if len(jql_query) < 3 or not any(keyword in jql_query.lower() for keyword in ['project', 'assignee', 'status', 'fixversion', 'key', 'summary']):
            return  # –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ JQL –∑–∞–ø—Ä–æ—Å
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã
        group_config = group_config_service.get_group_config(chat_id, topic_id)
        if not group_config or not group_config.jira_email or not group_config.jira_token:
            await safe_send_message(
                message.answer,
                "‚ùå Jira –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        await safe_send_message(
            message.answer,
            f"üîç **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é JQL –∑–∞–ø—Ä–æ—Å...**\n\n`{jql_query}`",
            parse_mode="Markdown"
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        from utils import parse_jira_jql
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        tasks = parse_jira_jql(jql_query)
        
        if not tasks:
            await safe_send_message(
                message.answer,
                "‚ùå **–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ JQL –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = session_service.get_session(chat_id, topic_id)
            if not session:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                from domain.entities import DomainSession
                from domain.value_objects import ChatId, TopicId
                
                session = DomainSession(
                    chat_id=ChatId(chat_id),
                    topic_id=TopicId(topic_id)
                )
                session_service.save_session(session)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã
            group_config_service.set_token(chat_id, topic_id, "magic_token")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
            success = session_service.start_voting_session(chat_id, topic_id, tasks)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            keyboard = [
                [types.InlineKeyboardButton(text="üó≥Ô∏è –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="start_voting")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ]
            
            if success:
                await safe_send_message(
                    message.answer,
                    f"‚úÖ **–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üìù **–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:** {len(tasks)}\n"
                    f"üéØ **–ì–æ—Ç–æ–≤ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é**\n\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π `/join magic_token`",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="Markdown"
                )
            else:
                await safe_send_message(
                    message.answer,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            
        except Exception as e:
            logger.error(f"Error creating session: {e}")
            await safe_send_message(
                message.answer,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
    except Exception as e:
        logger.error(f"Error in JQL query handler: {e}")
        await safe_send_message(
            message.answer,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        )


@router.callback_query(F.data == "start_voting")
async def handle_start_voting(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(callback.from_user, chat_id, topic_id):
            await safe_answer_callback(callback, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id)
        if not session:
            await safe_answer_callback(callback, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        from utils import build_vote_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∫–∞–ª—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        group_config = group_config_service.get_group_config(chat_id, topic_id)
        scale = group_config.scale if group_config else ['1', '2', '3', '5', '8', '13']
        
        keyboard = build_vote_keyboard(scale)
        
        await safe_send_message(
            callback.message.edit_text,
            f"üó≥Ô∏è **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!**\n\n"
            f"üìù **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {session.current_task.text.value if session.current_task else '–ù–µ—Ç –∑–∞–¥–∞—á'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in start voting handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "stats:today")
async def handle_stats_today(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id)
        if not session:
            await safe_answer_callback(callback, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from utils import generate_summary_report
        report = generate_summary_report(session)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await safe_send_message(
            callback.message.edit_text,
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n{report}",
            reply_markup=get_batch_summary_menu(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in stats today handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "stats:last_session")
async def handle_stats_last_session(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω—á"""
    try:
        if not callback.from_user or not callback.message:
            return
        
        chat_id = callback.message.chat.id
        topic_id = callback.message.message_thread_id or 0
        
        if not is_allowed_chat(chat_id, topic_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = session_service.get_session(chat_id, topic_id)
        if not session:
            await safe_answer_callback(callback, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞–Ω—á–∞
        from utils import format_batch_progress
        from core.bootstrap import bootstrap
        session_control_service = bootstrap.get_session_control_service()
        
        batch_info = session_control_service.get_batch_progress(chat_id, topic_id)
        stats_text = format_batch_progress(batch_info)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await safe_send_message(
            callback.message.edit_text,
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω—á**\n\n{stats_text}",
            reply_markup=get_batch_summary_menu(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in stats last session handler: {e}")
        await safe_answer_callback(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
