#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –ø–æ–ª—è Story Points –≤ Jira –ø—Ä–æ–µ–∫—Ç–∞—Ö
"""

import os
import sys
import json
import asyncio
import aiohttp
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import JIRA_BASE_URL, JIRA_EMAIL, JIRA_TOKEN

async def get_issue_editmeta(issue_key: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    url = f"{JIRA_BASE_URL}/rest/api/3/issue/{issue_key}/editmeta"
    auth = aiohttp.BasicAuth(JIRA_EMAIL, JIRA_TOKEN)
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, auth=auth) as response:
            if response.status == 200:
                return await response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {issue_key}: {response.status}")
                return {}

async def find_story_points_fields(issue_key: str) -> None:
    """–ù–∞–π—Ç–∏ –ø–æ–ª—è Story Points –≤ –∑–∞–¥–∞—á–µ"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É: {issue_key}")
    
    editmeta = await get_issue_editmeta(issue_key)
    if not editmeta:
        return
    
    fields = editmeta.get('fields', {})
    story_points_fields = []
    
    for field_id, field_info in fields.items():
        field_name = field_info.get('name', '').lower()
        field_type = field_info.get('schema', {}).get('type', '')
        
        # –ò—â–µ–º –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ Story Points
        if any(keyword in field_name for keyword in ['story', 'point', 'estimate', 'effort']):
            story_points_fields.append({
                'id': field_id,
                'name': field_info.get('name', ''),
                'type': field_type,
                'required': field_info.get('required', False),
                'allowed_values': field_info.get('allowedValues', [])
            })
    
    if story_points_fields:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è Story Points –¥–ª—è {issue_key}:")
        for field in story_points_fields:
            print(f"  üìã {field['id']}: {field['name']} ({field['type']})")
            if field['required']:
                print(f"     ‚ö†Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
    else:
        print(f"‚ùå –ü–æ–ª—è Story Points –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {issue_key}")
    
    return story_points_fields

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π Story Points –≤ Jira –ø—Ä–æ–µ–∫—Ç–∞—Ö")
    print("=" * 50)
    
    if not JIRA_EMAIL or not JIRA_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã JIRA_EMAIL –∏ JIRA_TOKEN")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    test_issues = [
        "FLEX-1",    # –ü—Ä–æ–µ–∫—Ç FLEX
        "IBO2-1323", # –ü—Ä–æ–µ–∫—Ç IBO2
        "ICT-1",     # –ü—Ä–æ–µ–∫—Ç ICT
        "HEHE-1",    # –ü—Ä–æ–µ–∫—Ç HEHE
    ]
    
    project_fields = {}
    
    for issue_key in test_issues:
        fields = await find_story_points_fields(issue_key)
        if fields:
            project_key = issue_key.split('-')[0]
            project_fields[project_key] = fields[0]['id']  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("=" * 50)
    
    if project_fields:
        mapping_json = json.dumps(project_fields, indent=2)
        print("JIRA_PROJECT_FIELD_MAPPING=" + mapping_json)
    else:
        print("JIRA_PROJECT_FIELD_MAPPING={}")
    
    print("\nüí° –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –≤–∞—à .env —Ñ–∞–π–ª")

if __name__ == "__main__":
    asyncio.run(main())
