"""
Text formatting utilities
"""
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from domain.entities import DomainSession as Session, DomainParticipant as Participant


def format_time_mmss(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ MM:SS"""
    seconds = max(0, int(seconds))
    m, s = divmod(seconds, 60)
    return f"{m:02d}:{s:02d}"


def format_participants_list(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not session.participants:
        return "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç"
    
    lines = []
    for participant in session.participants.values():
        role_emoji = {
            'participant': 'üë§',
            'lead': 'üëë',
            'admin': '‚öôÔ∏è',
            'super_admin': 'üîß'
        }.get(participant.role.value, 'üë§')
        
        lines.append(f"{role_emoji} {participant.full_name.value}")
    
    return "\n".join(lines)


def format_task_with_progress(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if not session.current_task:
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"
    
    task = session.current_task
    total_participants = len(session.participants)
    voted_count = len(task.votes)
    
    progress = f"({voted_count}/{total_participants})"
    
    return f"üìã **–ó–∞–¥–∞—á–∞ {task.index + 1}:** {task.text.value}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}"


def format_voting_status(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    if not session.current_task:
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"
    
    task = session.current_task
    total_participants = len(session.participants)
    voted_count = len(task.votes)
    
    if voted_count == total_participants:
        return "‚úÖ –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!"
    else:
        remaining = total_participants - voted_count
        return f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å: {remaining}"


def format_participant_stats(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not session.current_task or not session.current_task.votes:
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    lines = []
    for participant in session.participants.values():
        if participant.user_id in session.current_task.votes:
            vote = session.current_task.votes[participant.user_id]
            lines.append(f"üë§ {participant.full_name.value}: {vote.value.value}")
    
    return "\n".join(lines)


def format_average_estimates(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    if not session.current_task or not session.current_task.votes:
        return "üìä –û—Ü–µ–Ω–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    votes = []
    for vote in session.current_task.votes.values():
        try:
            votes.append(float(vote.value.value))
        except ValueError:
            continue
    
    if not votes:
        return "üìä –û—Ü–µ–Ω–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    avg = sum(votes) / len(votes)
    return f"üìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg:.1f} SP"


def calculate_task_estimate(session: Session) -> Optional[str]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞–¥–∞—á–∏ (–∏—Å–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–∞ –∞–¥–º–∏–Ω–æ–≤)"""
    if not session.current_task or not session.current_task.votes:
        return None
    
    votes = []
    for vote in session.current_task.votes.values():
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
            if hasattr(vote, 'user_id') and vote.user_id in session.participants:
                participant = session.participants[vote.user_id]
                if hasattr(participant, 'role') and participant.role.value in ['admin', 'super_admin']:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å –∞–¥–º–∏–Ω–∞
            
            votes.append(int(vote.value.value))
        except (ValueError, AttributeError):
            continue
    
    if not votes:
        return None
    
    # –ü—Ä–æ—Å—Ç–∞—è –º–µ–¥–∏–∞–Ω–∞
    votes.sort()
    n = len(votes)
    if n % 2 == 0:
        median = (votes[n//2 - 1] + votes[n//2]) / 2
    else:
        median = votes[n//2]
    
    return f"üìà –û—Ü–µ–Ω–∫–∞: {median} SP"


def generate_summary_report(session: Session, is_daily: bool = False) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–µ—Å—Å–∏–∏"""
    history = session.history if not is_daily else [
        task for task in session.history 
        if task.completed_at and task.completed_at.date() == datetime.now().date()
    ]
    
    if not history:
        return "üìä –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    
    total_tasks = len(history)
    completed_tasks = len([task for task in history if task.status.value == 'completed'])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ Story Points
    total_sp = 0
    for task in history:
        if task.result and task.result.value != 'pending':
            try:
                total_sp += float(task.result.value)
            except ValueError:
                continue
    
    lines = [
        f"üìä **–û—Ç—á–µ—Ç {'–∑–∞ –¥–µ–Ω—å' if is_daily else '–ø–æ —Å–µ—Å—Å–∏–∏'}**",
        f"",
        f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}",
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tasks}",
        f"üìà –û–±—â–∏–µ SP: {total_sp}",
        f"",
        f"üìã **–î–µ—Ç–∞–ª–∏:**"
    ]
    
    for i, task in enumerate(history, 1):
        status_emoji = "‚úÖ" if task.status.value == 'completed' else "‚è≥"
        result_text = task.result.value if task.result else "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ"
        lines.append(f"{status_emoji} {i}. {task.text.value} - {result_text}")
    
    return "\n".join(lines)
