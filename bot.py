#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π
"""

import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from config import BOT_TOKEN, ALLOWED_CHAT_ID, ALLOWED_TOPIC_ID, USER_TOKEN, LEAD_TOKEN, ADMIN_TOKEN, UserRole
from datetime import datetime, timedelta
import copy
import os

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
participants = {}
votes = {}
history = []
current_task = None
tasks_queue = []
current_task_index = 0
last_batch = []
batch_completed = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
active_vote_message_id = None
active_vote_task = None
active_timer_task = None
vote_deadline = None
t10_ping_sent = False

fibonacci_values = ['1', '2', '3', '5', '8', '13']
vote_timeout_seconds = 90

def get_user_role(user_id: int) -> UserRole:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in participants:
        return participants[user_id]['role']
    return UserRole.PARTICIPANT

def can_vote(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"""
    role = get_user_role(user_id)
    return role in [UserRole.PARTICIPANT, UserRole.LEAD]

def can_manage_session(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π"""
    role = get_user_role(user_id)
    return role in [UserRole.ADMIN, UserRole.LEAD]

def get_main_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu:new_task"),
            types.InlineKeyboardButton(text="üìã –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="menu:summary")
        ],
        [
            types.InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="menu:show_participants"),
            types.InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="menu:leave"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="menu:kick_participant")
        ]
    ])

def _format_mmss(seconds) -> str:
    seconds = max(0, int(seconds))
    m, s = divmod(seconds, 60)
    return f"{m:02d}:{s:02d}"

def _build_vote_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i + 3]]
        for i in range(0, len(fibonacci_values), 3)
    ])

def _build_admin_keyboard() -> types.InlineKeyboardMarkup:
    rows = [
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i + 3]]
        for i in range(0, len(fibonacci_values), 3)
    ]
    rows.append([
        types.InlineKeyboardButton(text="Ôºã30 —Å–µ–∫", callback_data="timer:+30"),
        types.InlineKeyboardButton(text="Ôºç30 —Å–µ–∫", callback_data="timer:-30"),
        types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="timer:finish"),
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(Command("join"))
async def join(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and msg.message_thread_id != ALLOWED_TOPIC_ID):
        return

    if not msg.text:
        try:
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        return
    
    args = msg.text.split()
    if len(args) != 2:
        try:
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        return

    token = args[1]
    user_id = msg.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É
    if token == ADMIN_TOKEN:
        role = UserRole.ADMIN
        role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif token == LEAD_TOKEN:
        role = UserRole.LEAD
        role_name = "–õ–∏–¥–µ—Ä"
    elif token == USER_TOKEN:
        role = UserRole.PARTICIPANT
        role_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        try:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
    participants[user_id] = {
        'name': msg.from_user.full_name,
        'role': role
    }
    
    # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if role == UserRole.ADMIN:
        votes.pop(user_id, None)
    
    try:
        await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ {role_name}.")
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ {role_name}.")
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu(callback: types.CallbackQuery):
    await callback.answer()

    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    if not can_manage_session(user_id):
        try:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π.", show_alert=True)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π.", show_alert=True)
        return

    # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if get_user_role(user_id) == UserRole.ADMIN:
        votes.pop(user_id, None)

    action = callback.data.split(":")[1]

    if action == "new_task":
        try:
            await callback.message.answer("‚úèÔ∏è –ö–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ https://—Å—Å—ã–ª–∫–∞")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("‚úèÔ∏è –ö–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ https://—Å—Å—ã–ª–∫–∞")

    elif action == "summary":
        await show_full_day_summary(callback.message)

    elif action == "show_participants":
        if not participants:
            try:
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
            for user_id, user_data in participants.items():
                role_emoji = {
                    UserRole.ADMIN: "üëë",
                    UserRole.LEAD: "‚≠ê", 
                    UserRole.PARTICIPANT: "üë§"
                }
                role_name = {
                    UserRole.ADMIN: "–ê–¥–º–∏–Ω",
                    UserRole.LEAD: "–õ–∏–¥–µ—Ä",
                    UserRole.PARTICIPANT: "–£—á–∞—Å—Ç–Ω–∏–∫"
                }
                emoji = role_emoji.get(user_data['role'], "üë§")
                role = role_name.get(user_data['role'], "–£—á–∞—Å—Ç–Ω–∏–∫")
                text += f"- {emoji} {user_data['name']} ({role})\n"
            try:
                await callback.message.answer(text)
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer(text)

    elif action == "leave":
        user_id = callback.from_user.id
        if user_id in participants:
            del participants[user_id]
            votes.pop(user_id, None)
            try:
                await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")

    elif action == "kick_participant":
        if not participants:
            try:
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        buttons = [
            [types.InlineKeyboardButton(text=f"{user_data['name']} ({user_data['role'].value})", callback_data=f"kick_user:{uid}")]
            for uid, user_data in participants.items()
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        try:
            await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("kick_user:"))
async def kick_user(callback: types.CallbackQuery):
    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    if not can_manage_session(user_id):
        try:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        return

    uid = int(callback.data.split(":")[1])
    user_data = participants.pop(uid, None)
    votes.pop(uid, None)

    if user_data:
        try:
            await callback.message.answer(f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{user_data['name']}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.", parse_mode="HTML")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer(f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{user_data['name']}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.", parse_mode="HTML")
    else:
        try:
            await callback.message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

async def show_full_day_summary(msg: types.Message):
    if not history:
        try:
            await msg.answer("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        return

    output_path = "day_summary.txt"
    total = 0
    with open(output_path, "w") as f:
        for i, h in enumerate(history, 1):
            f.write(f"{i}. {h['task']}\n")
            max_vote = 0
            sorted_votes = sorted(h['votes'].items(), key=lambda x: participants.get(x[0], {}).get('name', ''))
            for uid, v in sorted_votes:
                user_data = participants.get(uid, {})
                name = user_data.get('name', f"ID {uid}")
                role = user_data.get('role', UserRole.PARTICIPANT)
                f.write(f"  - {name} ({role.value}): {v}\n")
                try:
                    max_vote = max(max_vote, int(v))
                except:
                    pass
            total += max_vote
            f.write("\n")
        f.write(f"–í—Å–µ–≥–æ SP –∑–∞ –¥–µ–Ω—å: {total}\n")

    file = types.FSInputFile(output_path)
    try:
        await msg.answer_document(file, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer_document(file, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
    os.remove(output_path)

@router.message(Command("start", "help"))
async def help_command(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID:
        return
    text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á Planning Poker.\n\n"
        "–†–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã:\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫: `/join {USER_TOKEN}`\n"
        f"‚Ä¢ –õ–∏–¥–µ—Ä: `/join {LEAD_TOKEN}`\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: `/join {ADMIN_TOKEN}`\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã)\n"
        "‚Äî üìã –ò—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω—á–∞\n"
        "‚Äî üìä –ò—Ç–æ–≥–∏ –≤—Å–µ–≥–æ –¥–Ω—è\n"
        "‚Äî üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Äî üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é\n"
        "‚Äî üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã)\n\n"
        "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –ª–∏–¥–µ—Ä—ã –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏\n"
        "‚Ä¢ –õ–∏–¥–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"
    )
    try:
        await msg.answer(text, parse_mode="Markdown")
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer(text, parse_mode="Markdown")

@router.message()
async def unknown_input(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and msg.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = msg.from_user.id
    if user_id not in participants:
        try:
            await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ <code>/join &lt;—Ç–æ–∫–µ–Ω&gt;</code> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", parse_mode="HTML")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ <code>/join &lt;—Ç–æ–∫–µ–Ω&gt;</code> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", parse_mode="HTML")

async def main():
    print("üöÄ Planning Poker bot with roles starting...")
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    print("‚úÖ Bot is polling. Waiting for messages...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
