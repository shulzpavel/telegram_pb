#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π
"""

import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from config import BOT_TOKEN, ALLOWED_CHAT_ID, ALLOWED_TOPIC_ID, USER_TOKEN, LEAD_TOKEN, ADMIN_TOKEN, UserRole
from datetime import datetime, timedelta
import copy
import os
from typing import Optional, List, Dict, Any
from jira_service import jira_service
import json

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def save_state():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    state = {
        'participants': {str(k): {'name': v['name'], 'role': v['role'].value} for k, v in participants.items()},
        'votes': {str(k): v for k, v in votes.items()},
        'history': history,
        'current_task': current_task,
        'tasks_queue': tasks_queue,
        'current_task_index': current_task_index,
        'last_batch': last_batch,
        'batch_completed': batch_completed
    }
    with open('data/state.json', 'w', encoding='utf-8') as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def load_state():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global participants, votes, history, current_task, tasks_queue, current_task_index, last_batch, batch_completed
    
    try:
        with open('data/state.json', 'r', encoding='utf-8') as f:
            state = json.load(f)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º participants
        participants = {}
        for user_id_str, data in state.get('participants', {}).items():
            participants[int(user_id_str)] = {
                'name': data['name'],
                'role': UserRole(data['role'])
            }
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        votes = {int(k): v for k, v in state.get('votes', {}).items()}
        history = state.get('history', [])
        current_task = state.get('current_task')
        tasks_queue = state.get('tasks_queue', [])
        current_task_index = state.get('current_task_index', 0)
        last_batch = state.get('last_batch', [])
        batch_completed = state.get('batch_completed', False)
        
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    except FileNotFoundError:
        print("üìù –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
participants = {}
votes = {}  # –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
history = []
current_task = None
tasks_queue = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
current_task_index = 0
last_batch = []
batch_completed = False

# Jira –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
jira_tasks = {}  # task_key -> {summary, url, story_points}
current_jira_task = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
active_vote_message_id = None
active_vote_task = None
active_timer_task = None
vote_deadline = None
t10_ping_sent = False

fibonacci_values = ['1', '2', '3', '5', '8', '13']
vote_timeout_seconds = 90

def get_user_role(user_id: int) -> Optional[UserRole]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in participants:
        return participants[user_id]['role']
    return None

def can_vote(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"""
    role = get_user_role(user_id)
    return role is not None and role in [UserRole.PARTICIPANT, UserRole.LEAD]

def can_manage_session(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π"""
    role = get_user_role(user_id)
    return role is not None and role in [UserRole.ADMIN, UserRole.LEAD]

def get_main_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu:new_task"),
            types.InlineKeyboardButton(text="üìã –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="menu:summary")
        ],
        [
            types.InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="menu:show_participants"),
            types.InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="menu:leave"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="menu:kick_participant")
        ]
    ])

def _format_mmss(seconds) -> str:
    seconds = max(0, int(seconds))
    m, s = divmod(seconds, 60)
    return f"{m:02d}:{s:02d}"

def _build_vote_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i + 3]]
        for i in range(0, len(fibonacci_values), 3)
    ])

def _build_admin_keyboard() -> types.InlineKeyboardMarkup:
    rows = [
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in fibonacci_values[i:i + 3]]
        for i in range(0, len(fibonacci_values), 3)
    ]
    rows.append([
        types.InlineKeyboardButton(text="Ôºã30 —Å–µ–∫", callback_data="timer:+30"),
        types.InlineKeyboardButton(text="Ôºç30 —Å–µ–∫", callback_data="timer:-30"),
        types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="timer:finish"),
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(Command("join"))
async def join(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and msg.message_thread_id != ALLOWED_TOPIC_ID):
        return

    if not msg.text:
        try:
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        return
    
    args = msg.text.split()
    if len(args) != 2:
        try:
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <—Ç–æ–∫–µ–Ω>")
        return

    token = args[1]
    user_id = msg.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É
    if token == ADMIN_TOKEN:
        role = UserRole.ADMIN
        role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif token == LEAD_TOKEN:
        role = UserRole.LEAD
        role_name = "–õ–∏–¥–µ—Ä"
    elif token == USER_TOKEN:
        role = UserRole.PARTICIPANT
        role_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        try:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
    participants[user_id] = {
        'name': msg.from_user.full_name,
        'role': role
    }
    
    # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if role == UserRole.ADMIN:
        votes.pop(user_id, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_state()
    
    try:
        await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ {role_name}.")
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer(f"‚úÖ {msg.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ {role_name}.")
        await msg.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu(callback: types.CallbackQuery):
    await callback.answer()

    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id not in participants:
        try:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /join <—Ç–æ–∫–µ–Ω> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", show_alert=True)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /join <—Ç–æ–∫–µ–Ω> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
    if not can_manage_session(user_id):
        try:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π.", show_alert=True)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π.", show_alert=True)
        return

    # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if get_user_role(user_id) == UserRole.ADMIN:
        votes.pop(user_id, None)

    action = callback.data.split(":")[1]

    if action == "new_task":
        try:
            await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å JQL –∑–∞–ø—Ä–æ—Å –∏–∑ Jira (–Ω–∞–ø—Ä–∏–º–µ—Ä: key = FLEX-365 –∏–ª–∏ project = FLEX ORDER BY created DESC)")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å JQL –∑–∞–ø—Ä–æ—Å –∏–∑ Jira (–Ω–∞–ø—Ä–∏–º–µ—Ä: key = FLEX-365 –∏–ª–∏ project = FLEX ORDER BY created DESC)")

    elif action == "summary":
        await show_full_day_summary(callback.message)

    elif action == "show_participants":
        if not participants:
            try:
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
            for user_id, user_data in participants.items():
                role_emoji = {
                    UserRole.ADMIN: "üëë",
                    UserRole.LEAD: "‚≠ê", 
                    UserRole.PARTICIPANT: "üë§"
                }
                role_name = {
                    UserRole.ADMIN: "–ê–¥–º–∏–Ω",
                    UserRole.LEAD: "–õ–∏–¥–µ—Ä",
                    UserRole.PARTICIPANT: "–£—á–∞—Å—Ç–Ω–∏–∫"
                }
                emoji = role_emoji.get(user_data['role'], "üë§")
                role = role_name.get(user_data['role'], "–£—á–∞—Å—Ç–Ω–∏–∫")
                text += f"- {emoji} {user_data['name']} ({role})\n"
            try:
                await callback.message.answer(text)
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer(text)

    elif action == "leave":
        user_id = callback.from_user.id
        if user_id in participants:
            del participants[user_id]
            votes.pop(user_id, None)
            try:
                await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é.")

    elif action == "kick_participant":
        if not participants:
            try:
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await callback.message.answer("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        buttons = [
            [types.InlineKeyboardButton(text=f"{user_data['name']} ({user_data['role'].value})", callback_data=f"kick_user:{uid}")]
            for uid, user_data in participants.items()
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        try:
            await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("kick_user:"))
async def kick_user(callback: types.CallbackQuery):
    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    if not can_manage_session(user_id):
        try:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        return

    uid = int(callback.data.split(":")[1])
    user_data = participants.pop(uid, None)
    votes.pop(uid, None)

    if user_data:
        try:
            await callback.message.answer(f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{user_data['name']}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.", parse_mode="HTML")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer(f"üö´ –£—á–∞—Å—Ç–Ω–∏–∫ <b>{user_data['name']}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–µ—Å—Å–∏–∏.", parse_mode="HTML")
    else:
        try:
            await callback.message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await callback.message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

async def show_full_day_summary(msg: types.Message):
    if not history:
        try:
            await msg.answer("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("üì≠ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞—á.")
        return

    output_path = "day_summary.txt"
    total = 0
    with open(output_path, "w") as f:
        for i, h in enumerate(history, 1):
            f.write(f"{i}. {h['task']}\n")
            max_vote = 0
            sorted_votes = sorted(h['votes'].items(), key=lambda x: participants.get(x[0], {}).get('name', ''))
            for uid, v in sorted_votes:
                user_data = participants.get(uid, {})
                name = user_data.get('name', f"ID {uid}")
                role = user_data.get('role', UserRole.PARTICIPANT)
                f.write(f"  - {name} ({role.value}): {v}\n")
                try:
                    max_vote = max(max_vote, int(v))
                except:
                    pass
            total += max_vote
            f.write("\n")
        f.write(f"–í—Å–µ–≥–æ SP –∑–∞ –¥–µ–Ω—å: {total}\n")

    file = types.FSInputFile(output_path)
    try:
        await msg.answer_document(file, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer_document(file, caption="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
    os.remove(output_path)

@router.message(Command("start", "help"))
async def help_command(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID:
        return
    text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á Planning Poker.\n\n"
        "–†–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã:\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫: `/join {USER_TOKEN}`\n"
        f"‚Ä¢ –õ–∏–¥–µ—Ä: `/join {LEAD_TOKEN}`\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: `/join {ADMIN_TOKEN}`\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã)\n"
        "‚Äî üìã –ò—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω—á–∞\n"
        "‚Äî üìä –ò—Ç–æ–≥–∏ –≤—Å–µ–≥–æ –¥–Ω—è\n"
        "‚Äî üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Äî üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é\n"
        "‚Äî üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã)\n\n"
        "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –ª–∏–¥–µ—Ä—ã –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏\n"
        "‚Ä¢ –õ–∏–¥–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–µ–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"
    )
    try:
        await msg.answer(text, parse_mode="Markdown")
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer(text, parse_mode="Markdown")

@router.message()
async def handle_text_input(msg: types.Message):
    if msg.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and msg.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = msg.from_user.id
    if user_id not in participants:
        try:
            await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ <code>/join &lt;—Ç–æ–∫–µ–Ω&gt;</code> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", parse_mode="HTML")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ <code>/join &lt;—Ç–æ–∫–µ–Ω&gt;</code> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", parse_mode="HTML")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏
    if not can_manage_session(user_id):
        try:
            await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.")
        return
    
    if not msg.text:
        return
    
    jira_issues = jira_service.parse_jira_request(msg.text)
    if not jira_issues:
        try:
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Jira –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü—Ä–æ–≤–µ—Ä—å JQL –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Jira –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü—Ä–æ–≤–µ—Ä—å JQL –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await handle_jira_request(msg, jira_issues)

async def handle_jira_request(msg: types.Message, jira_issues: List[Dict[str, Any]]):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Jira"""
    try:
        start_new_session = len(tasks_queue) == 0
        added_count = 0
        skipped_keys = []
        existing_keys = {task.get('jira_key') for task in tasks_queue if task.get('jira_key')}

        for issue in jira_issues:
            jira_key = issue.get('key')
            if not jira_key:
                continue

            if jira_key in existing_keys:
                skipped_keys.append(jira_key)
                continue

            summary = issue.get('summary', jira_key)
            url = issue.get('url')
            story_points = issue.get('story_points')

            task_text = f"{summary} {url}" if url else summary
            task_data = {
                'text': task_text,
                'jira_key': jira_key,
                'summary': summary,
                'url': url,
                'votes': {},
                'story_points': story_points
            }
            tasks_queue.append(task_data)
            existing_keys.add(jira_key)

            jira_tasks[jira_key] = {
                'summary': summary,
                'url': url,
                'story_points': story_points
            }

            added_count += 1

        if added_count == 0:
            message = "‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á." if not skipped_keys else "‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏."
            try:
                await msg.answer(message)
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                await msg.answer(message)
            return

        response_text = [f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∑–∞–¥–∞—á –∏–∑ Jira."]
        if skipped_keys:
            response_text.append("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ: " + ", ".join(skipped_keys))

        try:
            await msg.answer("\n".join(response_text))
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await msg.answer("\n".join(response_text))

        if start_new_session:
            await start_voting_session(msg)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Jira: {e}")

async def start_voting_session(msg: types.Message):
    """–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    global current_task_index, current_task, votes, batch_completed
    
    if not tasks_queue:
        await msg.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return
    
    current_task_index = 0
    votes.clear()
    batch_completed = False
    
    await start_next_task(msg)

async def start_next_task(msg: types.Message):
    """–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ"""
    global current_task, current_task_index, active_vote_message_id, current_jira_task, votes
    
    if current_task_index >= len(tasks_queue):
        await finish_batch(msg)
        return
    
    task_data = tasks_queue[current_task_index]
    current_task = task_data['text']
    current_jira_task = task_data.get('jira_key')
    
    # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    votes.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    keyboard = _build_vote_keyboard()
    
    text = f"üìù –û—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á–∏ {current_task_index + 1}/{len(tasks_queue)}:\n\n{current_task}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É:"
    
    try:
        sent_msg = await msg.answer(text, reply_markup=keyboard, disable_web_page_preview=True)
        active_vote_message_id = sent_msg.message_id
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        sent_msg = await msg.answer(text, reply_markup=keyboard, disable_web_page_preview=True)
        active_vote_message_id = sent_msg.message_id

async def finish_batch(msg: types.Message):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞–Ω—á –∑–∞–¥–∞—á"""
    global batch_completed, last_batch
    
    batch_completed = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≥–æ–ª–æ—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    batch_result = {
        'tasks': tasks_queue.copy(),  # –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö —Å –≥–æ–ª–æ—Å–∞–º–∏
        'timestamp': datetime.now()
    }
    last_batch.append(batch_result)
    history.append(batch_result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await show_batch_results(msg)
    
    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    tasks_queue.clear()
    votes.clear()
    current_task_index = 0

async def show_batch_results(msg: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω—á–∞"""
    if not last_batch:
        return
    
    result = last_batch[-1]
    text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
    
    for i, task_data in enumerate(result['tasks'], 1):
        task_text = task_data['text']
        jira_key = task_data.get('jira_key')
        text += f"{i}. {task_text}"
        if jira_key:
            text += f" (Jira: {jira_key})"
        text += "\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        task_votes = task_data.get('votes', {})
        if task_votes:
            for uid, vote in task_votes.items():
                user_data = participants.get(uid, {})
                name = user_data.get('name', f'User {uid}')
                text += f"   - {name}: {vote}\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SP –≤ Jira
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å SP –≤ Jira", callback_data="update_jira_sp")],
        [types.InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
    ])
    
    try:
        await msg.answer(text, reply_markup=keyboard)
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await msg.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("vote:"))
async def handle_vote(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
    global current_task_index
    
    await callback.answer()
    
    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    if user_id not in participants:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ /join.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
    if not can_vote(user_id):
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.", show_alert=True)
        return
    
    value = callback.data.split(":")[1]
    votes[user_id] = value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    if current_task_index < len(tasks_queue):
        tasks_queue[current_task_index]['votes'][user_id] = value
    
    await callback.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
    voting_participants = {uid: data for uid, data in participants.items() if can_vote(uid)}
    if len(votes) >= len(voting_participants):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
        current_task_index += 1
        await start_next_task(callback.message)

@router.callback_query(F.data == "update_jira_sp")
async def handle_update_jira_sp(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å Story Points –≤ Jira"""
    await callback.answer()
    
    if callback.message.chat.id != ALLOWED_CHAT_ID or (ALLOWED_TOPIC_ID and callback.message.message_thread_id != ALLOWED_TOPIC_ID):
        return
    
    user_id = callback.from_user.id
    if not can_manage_session(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å SP.", show_alert=True)
        return
    
    if not last_batch:
        await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    result = last_batch[-1]
    updated_count = 0
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º SP –¥–ª—è –≤—Å–µ—Ö Jira –∑–∞–¥–∞—á –≤ –±–∞–Ω—á–µ
        jira_tasks_in_batch = [task for task in result['tasks'] if task.get('jira_key')]
        
        if not jira_tasks_in_batch:
            await callback.message.answer("‚ùå –í —ç—Ç–æ–º –±–∞–Ω—á–µ –Ω–µ—Ç Jira –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        
        updated_count = 0
        for task_data in jira_tasks_in_batch:
            jira_key = task_data['jira_key']
            task_votes = task_data.get('votes', {})
            
            if not task_votes:
                await callback.message.answer(f"‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {jira_key}.")
                continue
                
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            from collections import Counter
            vote_counts = Counter(task_votes.values())
            most_common_vote = vote_counts.most_common(1)[0][0]
            story_points = int(most_common_vote)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º SP –≤ Jira
            if jira_service.update_story_points(jira_key, story_points):
                jira_tasks[jira_key]['story_points'] = story_points
                task_data['story_points'] = story_points
                updated_count += 1
                await callback.message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ SP –¥–ª—è {jira_key}: {story_points} points")
            else:
                await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å SP –¥–ª—è {jira_key}")
        
        if updated_count > 0:
            await callback.message.answer(f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–¥–∞—á –≤ Jira!")
            
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Jira: {e}")

async def main():
    print("üöÄ Planning Poker bot with roles starting...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    load_state()
    
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    print("‚úÖ Bot is polling. Waiting for messages...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
