"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Telegram Poker Bot
"""
import asyncio
import logging
import re
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime, timedelta
from aiogram import types
from aiogram.exceptions import TelegramRetryAfter

logger = logging.getLogger(__name__)
from domain.entities import DomainSession as Session, DomainParticipant as Participant


def format_time_mmss(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ MM:SS"""
    seconds = max(0, int(seconds))
    m, s = divmod(seconds, 60)
    return f"{m:02d}:{s:02d}"


def build_vote_keyboard(scale: List[str]) -> types.InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    keyboard = []
    
    # Add voting buttons
    for i in range(0, len(scale), 3):
        row = [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in scale[i:i + 3]]
        keyboard.append(row)
    
    # Add finish button
    keyboard.append([types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_voting")])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_admin_keyboard(scale: List[str]) -> types.InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–æ–º"""
    rows = [
        [types.InlineKeyboardButton(text=v, callback_data=f"vote:{v}") for v in scale[i:i + 3]]
        for i in range(0, len(scale), 3)
    ]
    rows.append([
        types.InlineKeyboardButton(text="‚è∞ +30 —Å–µ–∫", callback_data="timer:+30"),
        types.InlineKeyboardButton(text="‚è∞ ‚àí30 —Å–µ–∫", callback_data="timer:-30"),
        types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_voting"),
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def get_main_menu(is_admin: bool = False) -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"GET_MAIN_MENU: is_admin={is_admin}")
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üÜï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu:new_task"),
            types.InlineKeyboardButton(text="üìã –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="menu:summary")
        ],
        [
            types.InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="menu:show_participants"),
            types.InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="menu:leave")
        ],
        [
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="menu:kick_participant")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if is_admin:
        logger.info("GET_MAIN_MENU: Adding admin button")
        keyboard.append([
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å Story Points", callback_data="admin:update_story_points")
        ])
    else:
        logger.info("GET_MAIN_MENU: User is not admin, not adding admin button")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–µ–∑–¥–µ
    keyboard.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_settings_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚è±Ô∏è –¢–∞–π–º–∞—É—Ç", callback_data="settings:timeout"),
            types.InlineKeyboardButton(text="üìä –®–∫–∞–ª–∞", callback_data="settings:scale")
        ],
        [
            types.InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã", callback_data="settings:admins"),
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
        ]
    ])


def get_scale_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∫–∞–ª—ã"""
    scales = [
        ['1', '2', '3', '5', '8', '13'],
        ['1', '2', '3', '5', '8', '13', '21'],
        ['0.5', '1', '2', '3', '5', '8', '13'],
        ['1', '2', '4', '8', '16', '32']
    ]
    
    buttons = []
    for i, scale in enumerate(scales):
        scale_text = ', '.join(scale)
        buttons.append([types.InlineKeyboardButton(
            text=f"üìä {scale_text}", 
            callback_data=f"scale:{i}"
        )])
    
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:settings")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


def get_timeout_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
    timeouts = [30, 60, 90, 120, 180, 300]
    
    buttons = []
    for i in range(0, len(timeouts), 2):
        row = []
        for j in range(2):
            if i + j < len(timeouts):
                timeout = timeouts[i + j]
                row.append(types.InlineKeyboardButton(
                    text=f"‚è±Ô∏è {timeout}—Å", 
                    callback_data=f"timeout:{timeout}"
                ))
        buttons.append(row)
    
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:settings")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


async def safe_send_message(
    message_func, 
    text: str, 
    reply_markup: Optional[types.InlineKeyboardMarkup] = None,
    parse_mode: Optional[str] = None,
    disable_web_page_preview: bool = False,
    **kwargs
) -> Optional[types.Message]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π TelegramRetryAfter"""
    import logging
    logger = logging.getLogger(__name__)
    
    # Check if message contains links
    contains_links = '<a href=' in text or ('[' in text and '](' in text) or 'https://' in text
    
    # If message contains links, disable web page preview to ensure links are clickable
    if contains_links and not disable_web_page_preview:
        disable_web_page_preview = True
        logger.info(f"SAFE_SEND_MESSAGE: Links detected, disabling web page preview")
    
    logger.info(f"SAFE_SEND_MESSAGE: text_length={len(text)}, parse_mode={parse_mode}, disable_web_page_preview={disable_web_page_preview}")
    logger.info(f"SAFE_SEND_MESSAGE: contains_links={contains_links}")
    
    try:
        result = await message_func(
            text, 
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview,
            **kwargs
        )
        logger.info(f"SAFE_SEND_MESSAGE: Success - message_id={result.message_id if result else None}")
        return result
    except TelegramRetryAfter as e:
        logger.warning(f"SAFE_SEND_MESSAGE: TelegramRetryAfter, sleeping {e.retry_after}s")
        await asyncio.sleep(e.retry_after)
        result = await message_func(
            text, 
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview,
            **kwargs
        )
        logger.info(f"SAFE_SEND_MESSAGE: Retry success - message_id={result.message_id if result else None}")
        return result
    except Exception as e:
        logger.error(f"SAFE_SEND_MESSAGE: Error: {e}")
        return None


async def safe_edit_message(
    bot, 
    chat_id: int, 
    message_id: int, 
    text: str, 
    reply_markup: Optional[types.InlineKeyboardMarkup] = None,
    parse_mode: Optional[str] = None,
    disable_web_page_preview: bool = False,
    **kwargs
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview,
            **kwargs
        )
        return True
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview,
                **kwargs
            )
            return True
        except Exception:
            return False
    except Exception:
        return False


async def safe_answer_callback(
    callback_query, 
    text: str, 
    show_alert: bool = False
) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        await callback_query.answer(text, show_alert=show_alert)
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        try:
            await callback_query.answer(text, show_alert=show_alert)
        except Exception:
            pass
    except Exception:
        pass


def format_participants_list(participants: List[Participant]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)"""
    if not participants:
        return "‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    
    lines = ["üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:"]
    for participant in participants:
        admin_mark = "üëë" if participant.is_admin() else "üë§"
        lines.append(f"{admin_mark} {participant.full_name.value}")
    
    return "\n".join(lines)


def format_participants_list_with_roles(participants: List[Participant], chat_id: int, topic_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏"""
    if not participants:
        return "‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    
    try:
        from core.bootstrap import bootstrap
        from domain.enums import ParticipantRole
        
        role_service = bootstrap.get_role_service()
        
        lines = ["üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:"]
        for participant in participants:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            username = participant.username or str(participant.user_id)
            role = role_service.get_user_role_by_username(chat_id, topic_id, username)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏
            role_emoji = {
                ParticipantRole.PARTICIPANT: "üë§",
                ParticipantRole.LEAD: "üëë", 
                ParticipantRole.ADMIN: "‚ö°",
                ParticipantRole.SUPER_ADMIN: "üîß"
            }.get(role, "üë§")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
            role_name = {
                ParticipantRole.PARTICIPANT: "–£—á–∞—Å—Ç–Ω–∏–∫",
                ParticipantRole.LEAD: "–õ–∏–¥", 
                ParticipantRole.ADMIN: "–ê–¥–º–∏–Ω",
                ParticipantRole.SUPER_ADMIN: "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω"
            }.get(role, "–£—á–∞—Å—Ç–Ω–∏–∫")
            
            lines.append(f"{role_emoji} **{participant.full_name.value}** ({role_name})")
        
        return "\n".join(lines)
        
    except Exception as e:
        logger.error(f"Error formatting participants with roles: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
        return format_participants_list(participants)


def format_vote_results(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    if not session.current_task or not session.current_task.votes:
        return "‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤."
    
    lines = ["üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:"]
    votes = session.current_task.votes
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    from domain.value_objects import UserId, Username, FullName
    sorted_votes = sorted(
        votes.items(), 
        key=lambda x: session.participants.get(x[0], Participant(UserId(0), Username(""), FullName(""))).full_name.value
    )
    
    for user_id, vote in sorted_votes:
        participant = session.participants.get(user_id)
        if participant:
            lines.append(f"üë§ {participant.full_name.value}: {vote.value.value}")
    
    return "\n".join(lines)


def calculate_task_estimate(session: Session) -> Optional[str]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞–¥–∞—á–∏ (–∏—Å–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–∞ –∞–¥–º–∏–Ω–æ–≤)"""
    if not session.current_task or not session.current_task.votes:
        return None
    
    votes = []
    for vote in session.current_task.votes.values():
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
            if hasattr(vote, 'user_id') and vote.user_id in session.participants:
                participant = session.participants[vote.user_id]
                if hasattr(participant, 'role') and participant.role.value in ['admin', 'super_admin']:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å –∞–¥–º–∏–Ω–∞
            
            votes.append(int(vote.value.value))
        except (ValueError, AttributeError):
            continue
    
    if not votes:
        return None
    
    # –ü—Ä–æ—Å—Ç–∞—è –º–µ–¥–∏–∞–Ω–∞
    votes.sort()
    n = len(votes)
    if n % 2 == 0:
        median = (votes[n//2 - 1] + votes[n//2]) / 2
    else:
        median = votes[n//2]
    
    return f"üìà –û—Ü–µ–Ω–∫–∞: {median} SP"


def generate_summary_report(session: Session, is_daily: bool = False) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–µ—Å—Å–∏–∏"""
    history = session.history if not is_daily else [
        h for h in session.history 
        if datetime.fromisoformat(h['timestamp']).date() == datetime.now().date()
    ]
    
    if not history:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞."
    
    lines = []
    if is_daily:
        lines.append("üìä –ò–¢–û–ì–ò –î–ù–Ø")
    else:
        lines.append("üìã –û–¢–ß–ï–¢ –ü–û –°–ï–°–°–ò–ò")
    
    lines.append("=" * 30)
    
    total_sp = 0
    for i, h in enumerate(history, 1):
        lines.append(f"\n{i}. {h['task']}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ –∏–º–µ–Ω–∞–º
        from domain.value_objects import UserId, Username, FullName
        sorted_votes = sorted(
            h['votes'].items(), 
            key=lambda x: session.participants.get(UserId(int(x[0])), Participant(UserId(1), Username("unknown"), FullName("Unknown User"))).full_name.value
        )
        
        max_vote = 0
        for uid_str, vote_value in sorted_votes:
            uid = UserId(int(uid_str))
            participant = session.participants.get(uid)
            if participant:
                lines.append(f"  üë§ {participant.full_name.value}: {vote_value}")
                try:
                    max_vote = max(max_vote, int(vote_value))
                except ValueError:
                    pass
        
        total_sp += max_vote
    
    lines.append(f"\nüìà –í—Å–µ–≥–æ SP: {total_sp}")
    return "\n".join(lines)


def get_stats_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats:today"),
            types.InlineKeyboardButton(text="üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="stats:last_session")
        ],
        [
            types.InlineKeyboardButton(text="üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="stats:participants"),
            types.InlineKeyboardButton(text="üéØ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏", callback_data="stats:averages")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
        ]
    ])


def get_help_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìñ –ö–æ–º–∞–Ω–¥—ã", callback_data="help:commands"),
            types.InlineKeyboardButton(text="üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å", callback_data="help:howto")
        ],
        [
            types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="help:settings"),
            types.InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω–∫–∞", callback_data="help:admin")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
        ]
    ])


def get_participants_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
        ]
    ])


def format_task_with_progress(current: int, total: int, task_text: str, batch_info: Optional[tuple] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    import logging
    logger = logging.getLogger(__name__)
    
    from config import JIRA_BASE_URL
    
    logger.info(f"FORMAT_TASK: Original text: {task_text}")
    logger.info(f"FORMAT_TASK: JIRA_BASE_URL: {JIRA_BASE_URL}")
    
    # Process task text with Jira links
    jira_generator = create_jira_link_generator(JIRA_BASE_URL)
    processed_task_text = jira_generator.process_task_text(task_text)
    
    logger.info(f"FORMAT_TASK: Processed text: {processed_task_text}")
    
    progress_bar = "‚ñà" * (current * 10 // total) + "‚ñë" * (10 - (current * 10 // total))
    
    if batch_info:
        current_batch, total_batches = batch_info
        result = f"üìù –ó–∞–¥–∞—á–∞ {current}/{total} (–ë–∞–Ω—á {current_batch}/{total_batches})\n\n{processed_task_text}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current}/{total}"
    else:
        result = f"üìù –ó–∞–¥–∞—á–∞ {current}/{total}\n\n{processed_task_text}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current}/{total}"
    
    # Truncate if too long (Telegram limit is 4096 characters)
    if len(result) > 4000:  # Leave some margin
        # Try to truncate the task description while keeping the link
        max_task_length = 4000 - len(result) + len(processed_task_text) - 100  # Leave 100 chars for safety
        if max_task_length > 50:  # Only truncate if we have reasonable space
            # Find the last complete HTML tag to avoid breaking links
            truncated_task = processed_task_text[:max_task_length]
            # If we're in the middle of an HTML tag, find the last complete one
            if '<' in truncated_task and '>' not in truncated_task[-10:]:
                last_tag_start = truncated_task.rfind('<')
                if last_tag_start > 0:
                    truncated_task = truncated_task[:last_tag_start]
            truncated_task = truncated_task + "..."
            
            if batch_info:
                current_batch, total_batches = batch_info
                result = f"üìù –ó–∞–¥–∞—á–∞ {current}/{total} (–ë–∞–Ω—á {current_batch}/{total_batches})\n\n{truncated_task}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current}/{total}"
            else:
                result = f"üìù –ó–∞–¥–∞—á–∞ {current}/{total}\n\n{truncated_task}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current}/{total}"
    
    logger.info(f"FORMAT_TASK: Final result: {result[:100]}...")
    return result


def format_voting_status(session: Session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    if not session.current_task:
        return "‚è∏Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ"
    
    voted_count = len(session.current_task.votes)
    total_count = len(session.participants)
    
    if voted_count == 0:
        return "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤..."
    elif voted_count == total_count:
        return "‚úÖ –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!"
    else:
        remaining = total_count - voted_count
        return f"üìä –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {voted_count}/{total_count} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})"


def format_participant_stats(participants: List[Participant], history: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not participants:
        return "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    lines = ["üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í", "=" * 25]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    activity = {}
    for participant in participants:
        activity[participant.user_id] = 0
    
    for h in history:
        for uid_str in h['votes'].keys():
            uid = int(uid_str)
            if uid in activity:
                activity[uid] += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    sorted_activity = sorted(activity.items(), key=lambda x: x[1], reverse=True)
    
    for uid, count in sorted_activity:
        participant = next((p for p in participants if p.user_id == uid), None)
        if participant:
            emoji = "ü•á" if count == max(activity.values()) and count > 0 else "üë§"
            lines.append(f"{emoji} {participant.full_name}: {count} –≥–æ–ª–æ—Å–æ–≤")
    
    return "\n".join(lines)


def format_average_estimates(history: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    if not history:
        return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    lines = ["üìä –°–†–ï–î–ù–ò–ï –û–¶–ï–ù–ö–ò", "=" * 20]
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    all_votes = []
    for h in history:
        for vote_value in h['votes'].values():
            try:
                all_votes.append(int(vote_value))
            except ValueError:
                pass
    
    if not all_votes:
        return "üìä –ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    avg_vote = sum(all_votes) / len(all_votes)
    min_vote = min(all_votes)
    max_vote = max(all_votes)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
    distribution = {}
    for vote in all_votes:
        distribution[vote] = distribution.get(vote, 0) + 1
    
    lines.append(f"üìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_vote:.1f}")
    lines.append(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_vote}")
    lines.append(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_vote}")
    lines.append(f"üìä –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {len(all_votes)}")
    
    lines.append("\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    for vote in sorted(distribution.keys()):
        count = distribution[vote]
        percentage = (count / len(all_votes)) * 100
        bar = "‚ñà" * int(percentage / 5)  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
        lines.append(f"  {vote}: {count} ({percentage:.1f}%) {bar}")
    
    return "\n".join(lines)


def generate_voting_results_file(session: Session) -> Optional[str]:
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –±–∞–Ω—á–∞"""
    if not session.last_batch:
        return None
    
    lines = []
    lines.append("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø")
    lines.append("=" * 50)
    lines.append(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    lines.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(session.participants)}")
    lines.append(f"üìù –ó–∞–¥–∞—á: {len(session.last_batch)}")
    lines.append("")
    
    total_sp = 0
    for i, task_data in enumerate(session.last_batch, 1):
        lines.append(f"üìù –ó–ê–î–ê–ß–ê {i}")
        lines.append("-" * 20)
        lines.append(f"–¢–µ–∫—Å—Ç: {task_data['task']}")
        lines.append("")
        
        if task_data['votes']:
            lines.append("üó≥Ô∏è –ì–æ–ª–æ—Å–∞:")
            from domain.value_objects import UserId
            for user_id, vote in task_data['votes'].items():
                participant = session.participants.get(UserId(int(user_id)))
                if participant:
                    lines.append(f"  üë§ {participant.full_name.value}: {vote}")
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
            max_vote = 0
            for vote_value in task_data['votes'].values():
                try:
                    max_vote = max(max_vote, int(vote_value))
                except ValueError:
                    pass
            
            total_sp += max_vote
            lines.append(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {max_vote} SP")
        else:
            lines.append("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤")
        
        lines.append("")
    
    lines.append("üìä –ò–¢–û–ì–ò")
    lines.append("-" * 20)
    lines.append(f"üìà –û–±—â–∏–π SP: {total_sp}")
    lines.append(f"üìâ –°—Ä–µ–¥–Ω–∏–π SP –Ω–∞ –∑–∞–¥–∞—á—É: {total_sp/len(session.last_batch):.1f}")
    
    return "\n".join(lines)


def get_batch_summary_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–Ω—á–∞"""
    return get_main_menu(is_admin=True)


def parse_task_list(text: str) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    import re
    
    lines = text.strip().split('\n')
    tasks = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if line in ['---', '***', '___', '===']:
            continue
            
        # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é (1., 2., etc.)
        line = re.sub(r'^\d+\.\s*', '', line)
        
        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã (-, *, ‚Ä¢, etc.)
        line = re.sub(r'^[-*‚Ä¢]\s*', '', line)
        
        # –£–±–∏—Ä–∞–µ–º markdown —á–µ–∫–±–æ–∫—Å—ã (- [ ], - [x])
        line = re.sub(r'^-\s*\[[ x]\]\s*', '', line)
        
        # –£–±–∏—Ä–∞–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ (##, ###)
        line = re.sub(r'^#+\s*', '', line)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        line = line.strip()
        
        if line:
            # Process line for Jira links if it contains task keys
            from config import JIRA_BASE_URL
            
            jira_generator = create_jira_link_generator(JIRA_BASE_URL)
            # Check if line contains Jira task keys
            if jira_generator.extract_task_keys(line):
                # Convert to format suitable for Jira links: KEY - Description
                task_key, description = jira_generator.parse_task_from_text(line)
                if task_key:
                    line = f"{task_key} - {description}"
            
            tasks.append(line)
    
    return tasks






# ============================================================================
# JIRA UTILITIES
# ============================================================================

class JiraLinkGenerator:
    """Generator for Jira task links"""
    
    def __init__(self, jira_base_url: str = "https://media-life.atlassian.net"):
        self.jira_base_url = jira_base_url.rstrip('/')
        # Pattern to match Jira task keys (e.g., FLEX-1213, IBO2-1297, etc.)
        self.task_key_pattern = re.compile(r'\b([A-Z][A-Z0-9]+-\d+)\b')
    
    def extract_task_keys(self, text: str) -> List[str]:
        """Extract all Jira task keys from text"""
        return self.task_key_pattern.findall(text)
    
    def generate_jira_link(self, task_key: str) -> str:
        """Generate Jira link for task key"""
        return f"{self.jira_base_url}/browse/{task_key}"
    
    def process_task_text(self, task_text: str) -> str:
        """Process task text and add clickable Jira link"""
        if not task_text:
            return task_text
        
        # Find all task keys in the text
        task_keys = self.extract_task_keys(task_text)
        
        if not task_keys:
            return task_text
        
        # Use the first task key found for the link
        first_task_key = task_keys[0]
        jira_link = self.generate_jira_link(first_task_key)
        
        # Remove task key from text (e.g., "FLEX-123 - Description" -> "Description")
        # Pattern: TASK_KEY - description
        pattern = rf'^{re.escape(first_task_key)}\s*-\s*'
        description_only = re.sub(pattern, '', task_text).strip()
        
        # Add clickable link using Markdown format
        return f"{description_only}\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Jira]({jira_link})"
    
    def parse_task_from_text(self, task_text: str) -> Tuple[Optional[str], str]:
        """Parse task key and description from text"""
        if not task_text:
            return None, task_text
        
        # Try to extract task key from the beginning
        match = re.match(r'^([A-Z][A-Z0-9]+-\d+)\s*[-|:]\s*(.+)', task_text.strip())
        if match:
            task_key = match.group(1)
            description = match.group(2).strip()
            return task_key, description
        
        # If no task key at the beginning, look for any task key in the text
        task_keys = self.extract_task_keys(task_text)
        if task_keys:
            # Use the first task key found
            task_key = task_keys[0]
            # Remove the task key from the description
            description = re.sub(rf'\b{re.escape(task_key)}\b\s*[-|:]?\s*', '', task_text).strip()
            return task_key, description
        
        return None, task_text
    


def create_jira_link_generator(jira_base_url: Optional[str] = None) -> JiraLinkGenerator:
    """Factory function to create Jira link generator"""
    if jira_base_url:
        return JiraLinkGenerator(jira_base_url)
    else:
        return JiraLinkGenerator()




# ============================================================================
# UI CONTROLS FOR SESSION CONTROL
# ============================================================================

# REMOVED: create_batch_completion_keyboard - replaced with get_batch_summary_menu


def create_pause_management_keyboard() -> types.InlineKeyboardMarkup:
    """Create keyboard for pause management"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ü–µ–Ω–∫—É",
                callback_data="pause:resume"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                callback_data="pause:stats"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é",
                callback_data="pause:back_to_discussion"
            )
        ]
    ])


def create_revoting_keyboard(task_count: int, current_index: int) -> types.InlineKeyboardMarkup:
    """Create keyboard for revoting process"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text=f"üîÑ –ü–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ({current_index + 1}/{task_count})",
                callback_data="revote:start"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                callback_data="revote:skip"
            )
        ]
    ])


def create_revoting_task_keyboard() -> types.InlineKeyboardMarkup:
    """Create keyboard for individual revoting task"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                callback_data="revote:complete"
            )
        ]
    ])


def create_voting_scale_keyboard(scale: List[str]) -> types.InlineKeyboardMarkup:
    """Create voting scale keyboard for revoting"""
    rows = []
    for i in range(0, len(scale), 3):
        row = []
        for j in range(i, min(i + 3, len(scale))):
            row.append(types.InlineKeyboardButton(
                text=scale[j],
                callback_data=f"revote_vote:{scale[j]}"
            ))
        rows.append(row)
    
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def create_session_control_keyboard() -> types.InlineKeyboardMarkup:
    """Create main session control keyboard"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                callback_data="control:pause"
            ),
            types.InlineKeyboardButton(
                text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="control:resume"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                callback_data="control:revote"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="control:stats"
            )
        ]
    ])


def create_discrepancy_analysis_keyboard(tasks_with_discrepancies: List[dict]) -> types.InlineKeyboardMarkup:
    """Create keyboard for discrepancy analysis"""
    if not tasks_with_discrepancies:
        return types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
                    callback_data="discrepancy:continue"
                )
            ]
        ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text=f"üîÑ –ü–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ({len(tasks_with_discrepancies)} –∑–∞–¥–∞—á)",
                callback_data="discrepancy:revote"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
                callback_data="discrepancy:continue"
            )
        ]
    ])


def format_batch_completion_message(batch_info: dict) -> str:
    """Format batch completion message with detailed statistics"""
    return f"""
üéØ **–ë–∞–Ω—á –∑–∞–≤–µ—Ä—à–µ–Ω!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω—á–∞:**
‚Ä¢ –ó–∞–¥–∞—á –æ—Ü–µ–Ω–µ–Ω–æ: {batch_info.get('completed_in_batch', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {batch_info.get('average_estimate', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {batch_info.get('batch_duration', 'N/A')}

ü§î **–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?**
    """.strip()


def format_pause_message(pause_info: dict) -> str:
    """Format pause message"""
    return f"""
‚è∏Ô∏è **–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

üìä **–ü—Ä–∏—á–∏–Ω–∞:** {pause_info.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚è∞ **–í—Ä–µ–º—è –ø–∞—É–∑—ã:** {pause_info.get('pause_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìù **–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:** {pause_info.get('remaining_tasks', 0)}

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    """.strip()


def format_revoting_message(revoting_info: dict) -> str:
    """Format revoting message"""
    from config import JIRA_BASE_URL
    
    # Process current task text with Jira links
    current_task = revoting_info.get('current_task', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
    if current_task != '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞':
        jira_generator = create_jira_link_generator(JIRA_BASE_URL)
        current_task = jira_generator.process_task_text(current_task)
    
    return f"""
üîÑ **–ü–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ**

üìä **–°—Ç–∞—Ç—É—Å:** {revoting_info.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìù **–ó–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:** {revoting_info.get('tasks_count', 0)}
üìç **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {revoting_info.get('current_index', 0) + 1}/{revoting_info.get('tasks_count', 0)}

üéØ **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {current_task}
    """.strip()


def format_discrepancy_analysis(tasks_with_discrepancies: List[dict]) -> str:
    """Format discrepancy analysis message"""
    if not tasks_with_discrepancies:
        return "‚úÖ **–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!** –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã."
    
    from config import JIRA_BASE_URL
    
    jira_generator = create_jira_link_generator(JIRA_BASE_URL)
    message = "‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –æ—Ü–µ–Ω–∫–∞—Ö:**\n\n"
    
    for task in tasks_with_discrepancies:
        # Process task text with Jira links
        task_text = jira_generator.process_task_text(task['text'])
        # Truncate if too long
        display_text = task_text[:50] + "..." if len(task_text) > 50 else task_text
        
        message += f"üìù **–ó–∞–¥–∞—á–∞ {task['index'] + 1}:** {display_text}\n"
        message += f"   ‚Ä¢ –ú–∏–Ω: {task['min_vote']}, –ú–∞–∫—Å: {task['max_vote']}\n"
        message += f"   ‚Ä¢ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {task['discrepancy_ratio']:.1f}x\n\n"
    
    message += "üîÑ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫.**"
    
    return message


def format_batch_progress(batch_info: dict) -> str:
    """Format batch progress message"""
    progress_percent = (batch_info.get('completed_in_batch', 0) / 
                       batch_info.get('batch_size', 10)) * 100
    
    # Calculate average time per task if we have duration and completed tasks
    avg_time_per_task = "N/A"
    if batch_info.get('batch_duration') != 'N/A' and batch_info.get('completed_in_batch', 0) > 0:
        try:
            # Parse duration and calculate average
            duration_str = batch_info.get('batch_duration', '')
            if '—á' in duration_str and '–º' in duration_str:
                # Format: "1—á 30–º"
                parts = duration_str.replace('—á', '').replace('–º', '').split()
                if len(parts) >= 2:
                    hours = int(parts[0])
                    minutes = int(parts[1])
                    total_minutes = hours * 60 + minutes
                    avg_minutes = total_minutes / batch_info.get('completed_in_batch', 1)
                    avg_time_per_task = f"{avg_minutes:.1f}–º"
            elif '–º' in duration_str and '—Å' in duration_str:
                # Format: "5–º 30—Å"
                parts = duration_str.replace('–º', '').replace('—Å', '').split()
                if len(parts) >= 2:
                    minutes = int(parts[0])
                    seconds = int(parts[1])
                    total_seconds = minutes * 60 + seconds
                    avg_seconds = total_seconds / batch_info.get('completed_in_batch', 1)
                    if avg_seconds >= 60:
                        avg_minutes = avg_seconds / 60
                        avg_time_per_task = f"{avg_minutes:.1f}–º"
                    else:
                        avg_time_per_task = f"{avg_seconds:.0f}—Å"
        except Exception:
            pass
    
    return f"""
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞–Ω—á–∞**

üéØ **–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {batch_info.get('completed_in_batch', 0)}/{batch_info.get('batch_size', 10)}
üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_percent:.1f}%
‚è∞ **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É:** {avg_time_per_task}
üìä **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** {batch_info.get('average_estimate', 'N/A')}
‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω—á–∞:** {batch_info.get('batch_duration', 'N/A')}

üîÑ **–°–ª–µ–¥—É—é—â–∏–π –±–∞–Ω—á:** {batch_info.get('total_tasks', 0) - batch_info.get('current_task_index', 0)} –∑–∞–¥–∞—á
    """.strip()


def parse_jira_jql(jql_query: str) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Jira –ø–æ JQL –∑–∞–ø—Ä–æ—Å—É"""
    try:
        import requests
        import base64
        from config import JIRA_BASE_URL, JIRA_EMAIL, JIRA_TOKEN
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Jira –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        jira_base_url = JIRA_BASE_URL
        jira_email = JIRA_EMAIL
        jira_token = JIRA_TOKEN
        
        if not jira_email or not jira_token:
            print(f"JIRA_PARSER: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã JIRA_EMAIL –∏–ª–∏ JIRA_TOKEN")
            return []
        
        print(f"JIRA_PARSER: –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JQL –∑–∞–ø—Ä–æ—Å–∞: {jql_query}")
        
        # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á
        search_url = f"{jira_base_url}/rest/api/3/search/jql"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_string = f"{jira_email}:{jira_token}"
        auth_bytes = auth_string.encode('ascii')
        auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
        
        headers = {
            'Authorization': f'Basic {auth_b64}',
            'Content-Type': 'application/json'
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'jql': jql_query,
            'fields': 'key,summary',
            'maxResults': 100  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
        }
        
        print(f"JIRA_PARSER: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {search_url}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(search_url, headers=headers, params=params, timeout=30)
        
        if response.status_code != 200:
            print(f"JIRA_PARSER: –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return []
        
        data = response.json()
        issues = data.get('issues', [])
        
        print(f"JIRA_PARSER: –ù–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á")
        
        tasks = []
        for issue in issues:
            key = issue.get('key', '')
            summary = issue.get('fields', {}).get('summary', '')
            
            if key and summary:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–õ–Æ–ß - –û–ø–∏—Å–∞–Ω–∏–µ
                task_text = f"{key} - {summary}"
                tasks.append(task_text)
                print(f"JIRA_PARSER: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_text}")
        
        print(f"JIRA_PARSER: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        return tasks
        
    except Exception as e:
        print(f"JIRA_PARSER: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JQL: {e}")
        return []


def parse_jira_jql_with_config(jql_query: str, group_config) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Jira –ø–æ JQL –∑–∞–ø—Ä–æ—Å—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≥—Ä—É–ø–ø—ã"""
    try:
        import requests
        import base64
        from config import JIRA_BASE_URL
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Jira –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        jira_base_url = JIRA_BASE_URL
        jira_email = group_config.jira_email
        jira_token = group_config.jira_token
        
        if not jira_email or not jira_token:
            print(f"JIRA_PARSER: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã jira_email –∏–ª–∏ jira_token –¥–ª—è –≥—Ä—É–ø–ø—ã")
            return []
        
        print(f"JIRA_PARSER: –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JQL –∑–∞–ø—Ä–æ—Å–∞: {jql_query}")
        print(f"JIRA_PARSER: –ò—Å–ø–æ–ª—å–∑—É–µ–º email: {jira_email}")
        
        # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á
        search_url = f"{jira_base_url}/rest/api/3/search"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_string = f"{jira_email}:{jira_token}"
        auth_bytes = auth_string.encode('ascii')
        auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
        
        headers = {
            'Authorization': f'Basic {auth_b64}',
            'Content-Type': 'application/json'
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'jql': jql_query,
            'fields': 'key,summary',
            'maxResults': 100  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
        }
        
        print(f"JIRA_PARSER: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {search_url}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(search_url, headers=headers, params=params, timeout=30)
        
        print(f"JIRA_PARSER: –û—Ç–≤–µ—Ç API: {response.status_code}")
        
        if response.status_code != 200:
            print(f"JIRA_PARSER: –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return []
        
        data = response.json()
        issues = data.get('issues', [])
        
        print(f"JIRA_PARSER: –ù–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á")
        
        tasks = []
        for issue in issues:
            key = issue.get('key', '')
            summary = issue.get('fields', {}).get('summary', '')
            
            if key and summary:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–õ–Æ–ß - –û–ø–∏—Å–∞–Ω–∏–µ
                task_text = f"{key} - {summary}"
                tasks.append(task_text)
                print(f"JIRA_PARSER: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_text}")
        
        print(f"JIRA_PARSER: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        return tasks
        
    except Exception as e:
        print(f"JIRA_PARSER: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JQL: {e}")
        return []
